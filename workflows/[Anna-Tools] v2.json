{
  "createdAt": "2025-01-30T18:15:19.416Z",
  "updatedAt": "2025-02-05T10:43:51.119Z",
  "id": "vvfHJHxmt2hCJJE5",
  "name": "[Anna-Tools] v2",
  "active": true,
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "chatwoot",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -500,
        1600
      ],
      "id": "a56c5148-92be-4812-80b4-b291668f3f17",
      "name": "Chatwoot Input",
      "webhookId": "d503e6f9-0989-42d5-a598-e268b20c3182"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -100,
        1700
      ],
      "id": "4e9bdb11-d138-4dbd-9c62-02674c781591",
      "name": "No Operation "
    },
    {
      "parameters": {
        "mode": "expression",
        "numberOutputs": 2,
        "output": "={{ \n  $json.body.event === 'message_created' &&\n  $json.body.conversation.messages[0].sender_type !== 'AgentBot' &&\n  $json.body.conversation.meta.sender.phone_number !== '+123456'\n    ? 0 : 1\n}}"
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -300,
        1600
      ],
      "id": "77fd2c53-d8b9-4d09-b0f3-fdab35ff2694",
      "name": "Switch "
    },
    {
      "parameters": {
        "queue": "main-n8n",
        "options": {}
      },
      "type": "n8n-nodes-base.rabbitmq",
      "typeVersion": 1.1,
      "position": [
        -100,
        1500
      ],
      "id": "7ccbf1b8-a81e-45bf-9055-296d50d09b27",
      "name": "Sender",
      "credentials": {
        "rabbitmq": {
          "id": "6NHDTRxm1okZ2Rb7",
          "name": "RabbitMQ account"
        }
      }
    },
    {
      "parameters": {
        "queue": "dlx-queue",
        "options": {
          "acknowledge": "executionFinishesSuccessfully",
          "jsonParseBody": true,
          "onlyContent": true
        }
      },
      "type": "n8n-nodes-base.rabbitmqTrigger",
      "typeVersion": 1,
      "position": [
        220,
        1700
      ],
      "id": "7f6669a0-8c9e-4ab7-80e4-9a68d87bc7c5",
      "name": "DLX Consumer",
      "credentials": {
        "rabbitmq": {
          "id": "6NHDTRxm1okZ2Rb7",
          "name": "RabbitMQ account"
        }
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "={{ $json.body.sender.id.toString() }}"
      },
      "id": "3347b780-5d07-4b69-b473-0cfb4b482ffc",
      "name": "Reset List ",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        420,
        1700
      ],
      "notesInFlow": false,
      "credentials": {
        "redis": {
          "id": "QMizCbyGR7YJ92UI",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "content": "",
        "height": 500,
        "width": 700,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -600,
        1400
      ],
      "id": "0a4e18bd-8d9c-489c-912e-cb1705f057a4",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "",
        "height": 300,
        "width": 500,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        120,
        1600
      ],
      "id": "346a217e-0fdd-4571-a21f-ca845619e36a",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "content": "",
        "height": 1080,
        "width": 2460,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -620,
        900
      ],
      "typeVersion": 1,
      "id": "0541f009-0101-42e3-b56e-ca40f66d598a",
      "name": "Sticky Note8"
    },
    {
      "parameters": {
        "url": "https://openrouter.ai/api/v1/models",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $json.openrouter_key }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        220,
        1020
      ],
      "id": "d626361f-edf0-4c6a-b507-eb1e5b7941ce",
      "name": "Get Models",
      "notesInFlow": true
    },
    {
      "parameters": {
        "method": "PATCH",
        "url": "http://directus:8055/fields/ai_agents/models",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Get Global Vars').item.json.directus_token }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"meta\": {\n    \"interface\": \"select-dropdown\",\n    \"options\": {\n      \"choices\": {{ \n        JSON.stringify($json.data.map(model => ({\n          \"text\": model.name,\n          \"value\": model.id\n        })))\n      }},\n      \"allowOther\": false\n    }\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        420,
        1020
      ],
      "id": "fa2a43f1-9167-4fc9-bb3c-979a6ca17f60",
      "name": "Update Options",
      "notesInFlow": true,
      "retryOnFail": true
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "global_vars",
          "mode": "list",
          "cachedResultName": "global_vars"
        },
        "returnAll": true,
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -100,
        1180
      ],
      "id": "9ca19c25-ff9c-4006-aa58-1f534664c3f8",
      "name": "Get Global Vars",
      "credentials": {
        "postgres": {
          "id": "1Jj8ddykbvqPSFOp",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "content": "",
        "height": 300,
        "width": 500,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        120,
        920
      ],
      "id": "568c620d-cf2c-4a44-9cc2-b35fedfc7ab3",
      "name": "Sticky Note9"
    },
    {
      "parameters": {
        "content": "Início do workflow, recebe dados, filtra eles, e envia pro RabbitMQ.",
        "height": 80,
        "width": 260,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -580,
        1420
      ],
      "id": "4504ce11-d150-4d4f-acfc-e17ff1c5af93",
      "name": "Sticky Note10"
    },
    {
      "parameters": {
        "content": "Limpa o Redis em caso de execuções mal sucedidas",
        "height": 80,
        "width": 260,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        140,
        1580
      ],
      "id": "d4ec08e9-7d9f-40cf-b9d4-831cf122721c",
      "name": "Sticky Note11"
    },
    {
      "parameters": {
        "content": "Atualiza a lista de modelos de LLMs disponíveis no sistema",
        "height": 80,
        "width": 260,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        140,
        900
      ],
      "id": "44e88874-12d7-4111-8c6c-4bcc105e643c",
      "name": "Sticky Note12"
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "tableName": {
          "__rl": true,
          "value": "users",
          "mode": "list",
          "cachedResultName": "users"
        },
        "additionalFields": {},
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTrigger",
      "typeVersion": 1,
      "position": [
        740,
        1020
      ],
      "id": "64d5906f-6c9a-44ab-ac26-25d37efb2905",
      "name": "Listen Insert Users",
      "credentials": {
        "postgres": {
          "id": "1Jj8ddykbvqPSFOp",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "url": "={{ $('Listen Insert Users').item.json.payload.picture_url }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1140,
        1020
      ],
      "id": "8f817268-c9f7-4b2b-9869-2174fd315d9b",
      "name": "Download Picture"
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "global_vars",
          "mode": "list",
          "cachedResultName": "global_vars"
        },
        "returnAll": true,
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        940,
        1020
      ],
      "id": "31140422-95ca-45c6-ba11-9f5f63d7ee00",
      "name": "Get Global Vars 2",
      "credentials": {
        "postgres": {
          "id": "1Jj8ddykbvqPSFOp",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "users",
          "mode": "list",
          "cachedResultName": "users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "={{ $('Listen Insert Users').item.json.payload.id }}",
            "date_updated": "={{ $now }}",
            "picture": "={{ $json.data.id }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "date_created",
              "displayName": "date_created",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "date_updated",
              "displayName": "date_updated",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            },
            {
              "id": "picture_url",
              "displayName": "picture_url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "picture",
              "displayName": "picture",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        1540,
        1020
      ],
      "id": "d16335c0-b9e0-41d9-ac0b-d1495fec06bb",
      "name": "Add Picture",
      "credentials": {
        "postgres": {
          "id": "1Jj8ddykbvqPSFOp",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://directus:8055/files",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Get Global Vars 2').item.json.directus_token }}"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "data"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1340,
        1020
      ],
      "id": "66ef0ec9-0a77-4d32-bf81-552afd93863e",
      "name": "Upload Picture"
    },
    {
      "parameters": {
        "content": "",
        "height": 300,
        "width": 1100,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        640,
        920
      ],
      "id": "10210982-01b1-4ca8-be0b-8342ff212dd3",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "Adiciona a fato do usuário quando ele é criado",
        "height": 80,
        "width": 260,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        660,
        900
      ],
      "id": "f7b8bb6d-e2d7-4ed6-bebd-753f1383f09c",
      "name": "Sticky Note13"
    },
    {
      "parameters": {
        "content": "",
        "height": 300,
        "width": 500,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -400,
        1080
      ],
      "id": "ccf01ce3-f619-4878-877a-e8edb6b7b67d",
      "name": "Sticky Note14"
    },
    {
      "parameters": {
        "content": "",
        "height": 300,
        "width": 700,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        120,
        1260
      ],
      "id": "a3a9ee84-5e07-4cb8-82ff-2d372e5ddada",
      "name": "Sticky Note15"
    },
    {
      "parameters": {
        "command": "N8N_CLEAN_HOST=$(echo $N8N_HOST | sed 's|https://||' | sed 's|/$||') && \\\nrm -rf /home/node/$N8N_CLEAN_HOST/n8n-backups && \\\nmkdir -p /home/node/$N8N_CLEAN_HOST/n8n-backups && \\\nn8n export:credentials --decrypted --backup --output=/home/node/$N8N_CLEAN_HOST/n8n-backups > /dev/null 2>&1 && \\\nn8n export:workflow --backup --output=/home/node/$N8N_CLEAN_HOST/n8n-backups > /dev/null 2>&1 && \\\necho $N8N_CLEAN_HOST"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        220,
        1360
      ],
      "id": "49013567-465f-48c5-9fc0-f61209a3711d",
      "name": "n8n Backups"
    },
    {
      "parameters": {
        "fileSelector": "=/home/node/{{ $('n8n Backups').first().json.stdout }}/n8n-backups/*.json",
        "options": {
          "fileName": ""
        }
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        420,
        1360
      ],
      "id": "1381b252-7198-440c-bd14-977de913a7e4",
      "name": "Get Files"
    },
    {
      "parameters": {
        "operation": "fromJson",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        620,
        1360
      ],
      "id": "112a2678-6312-4c50-8c2b-65979924ec95",
      "name": "Convert Files"
    },
    {
      "parameters": {
        "content": "Exporta os backups do n8n para a sua máquina",
        "height": 80,
        "width": 260,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        140,
        1240
      ],
      "id": "cba10bab-f147-4a0f-8fd8-62c71e302a52",
      "name": "Sticky Note16"
    },
    {
      "parameters": {
        "url": "http://directus:8055/schema/snapshot",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Get Global Vars').item.json.directus_token }}"
            }
          ]
        },
        "options": {}
      },
      "id": "511339b4-1ce1-4467-84fc-26bf987219fd",
      "name": "Get Schema",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        820,
        1760
      ],
      "notesInFlow": true,
      "retryOnFail": true,
      "executeOnce": true
    },
    {
      "parameters": {
        "operation": "set",
        "key": "={{ $('n8n Backups').first().json.stdout }}/{{ $('Convert Files').all()[$itemIndex].json.data.keys().includes('nodes') ? 'workflows' : 'credentials' }}/{{ $('Convert Files').all()[$itemIndex].json.data.name }}",
        "value": "={{ JSON.stringify($('Convert Files').all()[$itemIndex].json.data, null, 2) }}",
        "keyType": "string"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1620,
        1360
      ],
      "id": "31b08c72-a6d8-44da-97bc-919a5b1b6cd6",
      "name": "Set n8n Backups",
      "credentials": {
        "redis": {
          "id": "QMizCbyGR7YJ92UI",
          "name": "Redis account"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "data",
        "key": "={{ $('n8n Backups').first().json.stdout }}/{{ $('Convert Files').all()[$itemIndex].json.data.keys().includes('nodes') ? 'workflows' : 'credentials' }}/{{ $('Convert Files').all()[$itemIndex].json.data.name }}",
        "keyType": "string",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1020,
        1360
      ],
      "id": "fff745a0-b5aa-4835-bb0c-3e2f622ef591",
      "name": "Get n8n Backups",
      "credentials": {
        "redis": {
          "id": "QMizCbyGR7YJ92UI",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "/**\n * Código unificado para realizar backup no GitHub de:\n *   - Itens do n8n (workflows/credentials) – todos os itens do nó \"Convert Files\" serão salvos.\n *   - Stacks do Portainer (em YAML).\n *   - Schema do Directus (o conteúdo do nó \"Get Schema\").\n *\n * Requisitos:\n * - \"Get Global Vars\" fornece github_username e github_repository.\n * - \"n8n Backups\" retorna JSON com \"stdout\" (caminho base para backups).\n * - \"Convert Files\" contém os itens a serem salvos, inclusive aquele com data.type === 'githubApi'\n *      (token GitHub em data.data.accessToken).\n * - \"Get n8n Backups\" retorna os backups anteriores dos itens n8n.\n * - \"Get Stacks\" retorna, para cada stack:\n *      * json.stackName – nome da stack.\n *      * json.file.StackFileContent – conteúdo (YAML) da stack.\n * - \"Get Stacks Backups\" retorna um array onde cada item possui json.data (backup anterior da stack).\n * - \"Get Schema\" retorna o schema do Directus em json.data.\n * - \"Get Schema Backup\" retorna, se existir, o backup anterior do schema em json.data.\n *\n * Lógica:\n *  - Para cada item, o novo conteúdo (após trim) é comparado com o backup (após trim):\n *      * Se forem iguais, nenhuma operação é realizada.\n *      * Se o backup for null, a operação primária é de criação.\n *      * Se o backup existir e for diferente, a operação primária é de atualização.\n *  - Não é feita verificação GET prévia; se a operação primária falhar, é feito um GET para obter o SHA atual e\n *    tenta-se a operação inversa (fallback):\n *       * Se tentou criar, passa a atualizar (obtendo o SHA via GET).\n *       * Se tentou atualizar, passa a criar (removendo o SHA).\n *  - Um delay de 1 segundo é aplicado somente se uma requisição PUT (ou fallback) for efetuada.\n *  - A propriedade \"advancedLogs\" será incluída nos resultados somente se advancedLogsEnabled for true;\n *    caso contrário, essa chave não será adicionada.\n */\n\n// ----------------------------------------------------------------------\n// Configurações Gerais (hardcode)\n// ----------------------------------------------------------------------\nconst advancedLogsEnabled = false; // Altere para true para exibir logs avançados\n\n// ----------------------------------------------------------------------\n// Importa o axios para requisições HTTP\nconst axios = require('axios');\n\n// Função de delay (aguarda ms milissegundos)\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n// ===================================================================\n// 1. Configurações Comuns\n// ===================================================================\n\n// Obtém as variáveis globais do GitHub a partir do nó \"Get Global Vars\"\nconst globalVars = $('Get Global Vars').first().json;\nconst owner = globalVars.github_username;\nconst repo = globalVars.github_repository;\nconsole.log(`Usuário GitHub: ${owner}`);\nconsole.log(`Repositório GitHub: ${repo}`);\n\n// Obtém o caminho base para os backups (nó \"n8n Backups\")\nconst backupNode = $('n8n Backups').first().json;\nconst basePath = backupNode.stdout;\nconsole.log(`Caminho base para backups: ${basePath}`);\n\n// ===================================================================\n// 2. Dados de Entrada para Cada Grupo\n// ===================================================================\n\n// (a) Itens n8n para backup (workflows/credentials)\n//     - Todos os itens do nó \"Convert Files\" serão processados para backup.\nconst convertItemsAll = $('Convert Files').all();\nconst n8nItems = convertItemsAll;  \nconsole.log(`Total de itens n8n para processar: ${n8nItems.length}`);\n\n// Backup anterior dos itens n8n (ordem compatível)\nconst n8nBackupItems = $('Get n8n Backups').all();\nconsole.log(`Total de backups n8n obtidos: ${n8nBackupItems.length}`);\n\n// (b) Itens de stacks para backup (do Portainer)\n//     - Itens vêm do nó \"Get Stacks\" (cada um com stackName e file.StackFileContent)\nconst stackItems = $('Get Stacks').all();\nconsole.log(`Total de stacks para processar: ${stackItems.length}`);\n\n// Backup anterior das stacks (cada item com json.data)\nconst stackBackupItems = $('Get Stacks Backups').all();\nconsole.log(`Total de backups de stacks obtidos: ${stackBackupItems.length}`);\n\n// (c) Schema do Directus\n//     - O novo conteúdo vem do nó \"Get Schema\" (json.data, formatado com JSON.stringify)\nconst schemaNewContent = JSON.stringify($('Get Schema').first().json.data, null, 2);\nconst schemaFilePath = `${basePath}/schema.json`;\nconst schemaCommitMessage = \"Backup schema\";\n// Obtém o backup anterior do schema do nó \"Get Schema Backup\"\nlet schemaBackup = null;\ntry {\n  schemaBackup = $('Get Schema Backup').first().json.data;\n  console.log(\"Backup anterior do schema obtido.\");\n} catch (e) {\n  console.log(\"Nenhum backup anterior do schema encontrado.\");\n}\n\n// (d) Token de acesso do GitHub (usa o primeiro item com data.type === 'githubApi')\nconst githubItem = convertItemsAll.find(item => item.json.data.type === 'githubApi');\nif (!githubItem) {\n  throw new Error(\"Nenhum item com type 'githubApi' foi encontrado em Convert Files.\");\n}\nconst accessToken = githubItem.json.data.data.accessToken;\nconsole.log(\"Token de acesso do GitHub obtido com sucesso.\");\n\n// ===================================================================\n// 3. Monta um Array Unificado de Itens para Processamento\n// ===================================================================\nlet unifiedItems = [];\n\n// Processa os itens n8n\nn8nItems.forEach((item, index) => {\n  const fileData = item.json.data;\n  let fileName = fileData.name;\n  if (!fileName.endsWith('.json')) {\n    fileName += '.json';\n  }\n  // Define a pasta: \"workflows\" se existir a key \"nodes\", senão \"credentials\"\n  const folderType = (fileData && ('nodes' in fileData)) ? 'workflows' : 'credentials';\n  const filePath = `${basePath}/${folderType}/${fileName}`;\n  const newContent = JSON.stringify(fileData, null, 2);\n  const commitMessage = `Backup ${fileData.type}`;\n  let backupContent = null;\n  let existingSha = null;\n  if (n8nBackupItems[index] && n8nBackupItems[index].json && typeof n8nBackupItems[index].json.data !== 'undefined') {\n    backupContent = n8nBackupItems[index].json.data;\n    existingSha = n8nBackupItems[index].json.sha;\n  }\n  unifiedItems.push({\n    group: \"n8n\",\n    identifier: fileName,\n    filePath: filePath,\n    newContent: newContent,\n    commitMessage: commitMessage,\n    backupContent: backupContent,\n    existingSha: existingSha\n  });\n});\n\n// Processa os itens de stacks\nstackItems.forEach((item, index) => {\n  const stackName = item.json.stackName;\n  const filePath = `${basePath}/stacks/${stackName}.yaml`;\n  const newContent = item.json.file.StackFileContent;\n  const commitMessage = `Backup stack: ${stackName}`;\n  let backupContent = null;\n  if (stackBackupItems[index] && stackBackupItems[index].json && typeof stackBackupItems[index].json.data !== 'undefined') {\n    backupContent = stackBackupItems[index].json.data;\n  }\n  unifiedItems.push({\n    group: \"stack\",\n    identifier: stackName,\n    filePath: filePath,\n    newContent: newContent,\n    commitMessage: commitMessage,\n    backupContent: backupContent,\n    existingSha: null\n  });\n});\n\n// Adiciona o item de schema\nunifiedItems.push({\n  group: \"schema\",\n  identifier: \"schema.json\",\n  filePath: schemaFilePath,\n  newContent: schemaNewContent,\n  commitMessage: schemaCommitMessage,\n  backupContent: schemaBackup,\n  existingSha: null\n});\n\nconsole.log(`Total de itens unificados para backup: ${unifiedItems.length}`);\n\n// ===================================================================\n// 4. Função Auxiliar para Requisições HTTP (axios)\n// ===================================================================\nasync function makeRequest(method, url, payload) {\n  console.log(`Iniciando requisição ${method.toUpperCase()} para ${url}`);\n  try {\n    const response = await axios({\n      method,\n      url,\n      data: payload,\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n        Accept: 'application/vnd.github.v3+json',\n        'Content-Type': 'application/json'\n      }\n    });\n    console.log(`Requisição ${method.toUpperCase()} concluída com sucesso.`);\n    return response;\n  } catch (error) {\n    const errorDetails = error.response ? error.response.data : '';\n    console.error(`Erro na requisição ${method.toUpperCase()} para ${url}: ${error.message}`, errorDetails);\n    throw error;\n  }\n}\n\n// ===================================================================\n// 5. Processa Cada Item (Criar/Atualizar Arquivo no GitHub)\n// ===================================================================\nconst results = [];\n\nfor (let i = 0; i < unifiedItems.length; i++) {\n  const item = unifiedItems[i];\n  console.log(`\\n--- Processando [${item.group}] '${item.identifier}' ---`);\n\n  // Normaliza os conteúdos para comparação (remove espaços extras no início/fim)\n  const normalizedNewContent = item.newContent.trim();\n  const normalizedBackupContent = (typeof item.backupContent === 'string')\n    ? item.backupContent.trim()\n    : null;\n  \n  // Prepara informações avançadas para logs\n  const advancedInfo = {\n    group: item.group,\n    identifier: item.identifier,\n    filePath: item.filePath,\n    commitMessage: item.commitMessage,\n    newContent: item.newContent,\n    normalizedNewContent: normalizedNewContent,\n    backupContent: item.backupContent,\n    normalizedBackupContent: normalizedBackupContent,\n    primaryAction: null,\n    payload: {}\n  };\n  \n  // Se o novo conteúdo for igual ao backup (após normalização), nenhuma operação é realizada.\n  if (normalizedBackupContent === normalizedNewContent) {\n    console.log(`Arquivo '${item.identifier}' já está atualizado. Operação ignorada.`);\n    let resultObj = {\n      identifier: item.identifier,\n      filePath: item.filePath,\n      action: 'none',\n      status: 'up-to-date'\n    };\n    if (advancedLogsEnabled) {\n      resultObj.advancedLogs = advancedInfo;\n    }\n    results.push(resultObj);\n    continue;\n  }\n  \n  // Define a operação com base no backup: se backupContent é null, operação \"create\", senão \"update\".\n  const primaryAction = (normalizedBackupContent === null) ? 'create' : 'update';\n  advancedInfo.primaryAction = primaryAction;\n  \n  const url = `https://api.github.com/repos/${owner}/${repo}/contents/${encodeURIComponent(item.filePath)}`;\n  console.log(`URL da API do GitHub: ${url}`);\n  \n  // Prepara o payload\n  const encodedContent = Buffer.from(item.newContent).toString('base64');\n  const payload = {\n    message: item.commitMessage,\n    content: encodedContent,\n    branch: 'main',\n    committer: {\n      name: 'n8n Backup Bot',\n      email: 'backup@example.com'\n    }\n  };\n  advancedInfo.payload = payload;\n  \n  // Se a operação for update e não tivermos SHA, obtém-o via GET\n  if (primaryAction === 'update') {\n    if (item.existingSha) {\n      payload.sha = item.existingSha;\n    } else {\n      try {\n        console.log(`Obtendo SHA para atualização do arquivo '${item.identifier}'...`);\n        const getResponse = await axios.get(url, {\n          headers: {\n            Authorization: `Bearer ${accessToken}`,\n            Accept: 'application/vnd.github.v3+json'\n          }\n        });\n        payload.sha = getResponse.data.sha;\n        console.log(`SHA obtido: ${payload.sha}`);\n      } catch (error) {\n        console.error(`Erro ao obter SHA para atualização do arquivo '${item.identifier}': ${error.message}`);\n        let resultObj = {\n          identifier: item.identifier,\n          filePath: item.filePath,\n          status: 'failed',\n          error: error.toString(),\n          details: error.response ? error.response.data : null\n        };\n        if (advancedLogsEnabled) {\n          resultObj.advancedLogs = advancedInfo;\n        }\n        results.push(resultObj);\n        continue;\n      }\n    }\n  }\n  \n  let operationPerformed = false;\n  let actionLog = '';\n  \n  // Tenta a operação primária\n  try {\n    console.log(`Tentando ${primaryAction === 'create' ? 'criar' : 'atualizar'} o arquivo '${item.identifier}'...`);\n    const response = await makeRequest('put', url, payload);\n    actionLog = primaryAction === 'create' ? 'created' : 'updated';\n    console.log(`Arquivo '${item.identifier}' ${actionLog} com sucesso.`);\n    let resultObj = {\n      identifier: item.identifier,\n      filePath: item.filePath,\n      action: actionLog,\n      status: 'success',\n      data: response.data\n    };\n    if (advancedLogsEnabled) {\n      resultObj.advancedLogs = advancedInfo;\n    }\n    results.push(resultObj);\n    operationPerformed = true;\n  } catch (error) {\n    console.error(`Erro na tentativa primária (${primaryAction}) para o arquivo '${item.identifier}': ${error.message}`, error.response ? error.response.data : '');\n    // Tenta a operação inversa (fallback)\n    try {\n      console.log(`Tentando ação alternativa para o arquivo '${item.identifier}'...`);\n      const getResponse = await axios.get(url, {\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n          Accept: 'application/vnd.github.v3+json'\n        }\n      });\n      const fetchedSha = getResponse.data.sha;\n      console.log(`SHA obtido na tentativa alternativa: ${fetchedSha}`);\n      if (primaryAction === 'create') {\n        payload.sha = fetchedSha;\n        actionLog = 'fallback: updated (primary create error)';\n      } else {\n        delete payload.sha;\n        actionLog = 'fallback: created (primary update error)';\n      }\n      const response = await makeRequest('put', url, payload);\n      console.log(`Arquivo '${item.identifier}' ${actionLog} com sucesso.`);\n      let resultObj = {\n        identifier: item.identifier,\n        filePath: item.filePath,\n        action: actionLog,\n        status: 'success',\n        data: response.data\n      };\n      if (advancedLogsEnabled) {\n        resultObj.advancedLogs = advancedInfo;\n      }\n      results.push(resultObj);\n      operationPerformed = true;\n    } catch (error2) {\n      console.error(`Falha na tentativa alternativa para o arquivo '${item.identifier}': ${error2.message}`, error2.response ? error2.response.data : '');\n      let resultObj = {\n        identifier: item.identifier,\n        filePath: item.filePath,\n        status: 'failed',\n        error: error2.toString(),\n        details: error2.response ? error2.response.data : null\n      };\n      if (advancedLogsEnabled) {\n        resultObj.advancedLogs = advancedInfo;\n      }\n      results.push(resultObj);\n      operationPerformed = true;\n    }\n  }\n  \n  if (operationPerformed) {\n    await delay(1000);\n  }\n}\n\n// Retorna os resultados no formato esperado pelo n8n\nreturn results.map(result => ({ json: result }));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1420,
        1560
      ],
      "id": "328b9569-3d4f-47f8-82e4-af9183eb5330",
      "name": "Update GitHub"
    },
    {
      "parameters": {
        "operation": "set",
        "key": "={{ $('n8n Backups').all()[$itemIndex].json.stdout }}/schema.json",
        "value": "={{ JSON.stringify($('Get Schema').all()[$itemIndex].json.data, null, 2) }}",
        "keyType": "string"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1620,
        1760
      ],
      "id": "dacb2aeb-dcdd-4ee0-a6d2-32a3e7fbb6ab",
      "name": "Set Schema Backup",
      "credentials": {
        "redis": {
          "id": "QMizCbyGR7YJ92UI",
          "name": "Redis account"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "data",
        "key": "={{ $('n8n Backups').first().json.stdout }}/schema.json",
        "keyType": "string",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1020,
        1760
      ],
      "id": "89b82b35-312c-4a2e-91f9-ac2b418db507",
      "name": "Get Schema Backup",
      "credentials": {
        "redis": {
          "id": "QMizCbyGR7YJ92UI",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "data",
        "key": "={{ $('n8n Backups').first().json.stdout }}/stacks/{{ $('Get Stacks').item.json.stackName }}",
        "keyType": "string",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1020,
        1560
      ],
      "id": "ba73e58c-d8ba-4c08-ac99-1892b43ad06a",
      "name": "Get Stacks Backups",
      "credentials": {
        "redis": {
          "id": "QMizCbyGR7YJ92UI",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "set",
        "key": "={{ $('n8n Backups').first().json.stdout }}/stacks/{{ $('Get Stacks').all()[$itemIndex].json.stackName }}",
        "value": "={{ $('Get Stacks').all()[$itemIndex].json.file.StackFileContent }}",
        "keyType": "string"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1620,
        1560
      ],
      "id": "26d3cdd8-19e9-42dd-a746-76f9b657475b",
      "name": "Set Stacks Backups",
      "credentials": {
        "redis": {
          "id": "QMizCbyGR7YJ92UI",
          "name": "Redis account"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "numberInputs": 3
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        1220,
        1560
      ],
      "id": "fe6d670c-8ed8-4877-9972-40197946b8e0",
      "name": "Append"
    },
    {
      "parameters": {
        "jsCode": "/**\n * Código para recuperar todas as stacks do Portainer e os respectivos arquivos (file) de cada stack.\n * \n * Lógica:\n * 1. Obtém as credenciais do Portainer a partir do nó \"Get Global Vars\" e valida que não sejam nulas.\n * 2. Realiza login no Portainer para obter o token JWT.\n * 3. Obtém todas as stacks do Portainer.\n * 4. Para cada stack, obtém o arquivo associado (file).\n * 5. Se ocorrer algum erro, os logs detalhados serão retornados.\n * 6. Se tudo ocorrer normalmente, retorna apenas os resultados dos arquivos.\n * \n * Os resultados são retornados no formato esperado pelo n8n: cada item encapsulado em { json: { ... } }.\n */\n\nconst axios = require('axios');\n\n// Função de delay (aguarda ms milissegundos)\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n// ----------------------------------------------------------------------\n// 1. Obter parâmetros do Portainer\n// ----------------------------------------------------------------------\nconst globalVars = $('Get Global Vars').first().json;\nconst portainerUsername = globalVars.portainer_username;\nconst portainerPassword = globalVars.portainer_password;\n\nif (!portainerUsername || !portainerPassword) {\n  const errorMsg = `Parâmetros inválidos: portainer_username='${portainerUsername}', portainer_password='${portainerPassword}'`;\n  console.error(errorMsg);\n  throw new Error(errorMsg);\n}\n\nconsole.log(`Parâmetros do Portainer: username='${portainerUsername}', password='${portainerPassword ? '***' : 'null'}`);\n\n// URL base do Portainer\nconst portainerUrl = \"http://portainer:9000\";\n\n// ----------------------------------------------------------------------\n// 2. Função para logar no Portainer e obter um token JWT\n// ----------------------------------------------------------------------\nasync function loginPortainer() {\n  const url = `${portainerUrl}/api/auth`;\n  console.log(`Realizando login no Portainer em: ${url}`);\n  try {\n    const response = await axios.post(url, {\n      Username: portainerUsername,\n      Password: portainerPassword\n    });\n    console.log(\"Login realizado com sucesso. Token JWT obtido.\");\n    return response.data.jwt;\n  } catch (error) {\n    const errDetails = error.response ? error.response.data : error.message;\n    console.error(\"Erro ao realizar login no Portainer:\", errDetails);\n    throw new Error(`Erro no login no Portainer: ${JSON.stringify(errDetails)}`);\n  }\n}\n\n// ----------------------------------------------------------------------\n// 3. Função para obter todas as stacks do Portainer\n// ----------------------------------------------------------------------\nasync function getStacks(jwt) {\n  const url = `${portainerUrl}/api/stacks`;\n  console.log(`Obtendo stacks do Portainer em: ${url}`);\n  try {\n    const response = await axios.get(url, {\n      headers: {\n        Authorization: `Bearer ${jwt}`\n      }\n    });\n    console.log(`Total de stacks obtidas: ${response.data.length}`);\n    return response.data;\n  } catch (error) {\n    const errDetails = error.response ? error.response.data : error.message;\n    console.error(\"Erro ao obter stacks:\", errDetails);\n    throw new Error(`Erro ao obter stacks: ${JSON.stringify(errDetails)}`);\n  }\n}\n\n// ----------------------------------------------------------------------\n// 4. Função para obter o arquivo (file) de uma stack específica\n// ----------------------------------------------------------------------\nasync function getStackFile(jwt, stackId) {\n  const url = `${portainerUrl}/api/stacks/${stackId}/file`;\n  console.log(`Obtendo arquivo da stack ${stackId} em: ${url}`);\n  try {\n    const response = await axios.get(url, {\n      headers: {\n        Authorization: `Bearer ${jwt}`\n      }\n    });\n    console.log(`Arquivo da stack ${stackId} obtido com sucesso.`);\n    return response.data;\n  } catch (error) {\n    const errDetails = error.response ? error.response.data : error.message;\n    console.error(`Erro ao obter arquivo da stack ${stackId}:`, errDetails);\n    throw new Error(`Erro ao obter arquivo da stack ${stackId}: ${JSON.stringify(errDetails)}`);\n  }\n}\n\n// ----------------------------------------------------------------------\n// 5. Função principal\n// ----------------------------------------------------------------------\nasync function main() {\n  const results = [];\n  const logs = [];\n  \n  try {\n    // Realiza login e obtém o token JWT\n    const jwt = await loginPortainer();\n    logs.push({ step: \"login\", message: \"Login realizado com sucesso.\", jwt });\n    \n    // Obtém todas as stacks\n    const stacks = await getStacks(jwt);\n    logs.push({ step: \"getStacks\", message: \"Stacks obtidas com sucesso.\", total: stacks.length });\n    \n    // Para cada stack, obtém o arquivo associado\n    for (const stack of stacks) {\n      console.log(`Processando stack - ID: ${stack.Id}, Nome: ${stack.Name}`);\n      try {\n        const file = await getStackFile(jwt, stack.Id);\n        logs.push({ step: \"getStackFile\", stackId: stack.Id, message: \"Arquivo obtido com sucesso.\" });\n        results.push({\n          stackId: stack.Id,\n          stackName: stack.Name,\n          file: file\n        });\n      } catch (error) {\n        logs.push({ step: \"getStackFile\", stackId: stack.Id, message: \"Erro ao obter arquivo.\", error: error.toString() });\n        results.push({\n          stackId: stack.Id,\n          stackName: stack.Name,\n          error: error.toString()\n        });\n      }\n      await delay(1000);\n    }\n    \n    // Se tudo ocorrer normalmente, retorna apenas os resultados\n    return results.map(item => ({ json: item }));\n    \n  } catch (error) {\n    console.error(\"Erro no processamento principal:\", error.toString());\n    // Em caso de erro, retorna os logs detalhados junto com a mensagem de erro\n    return [{ json: { error: error.toString(), logs } }];\n  }\n}\n\nreturn main();\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        820,
        1560
      ],
      "id": "b59f6c80-2574-405e-af01-234346092e18",
      "name": "Get Stacks"
    },
    {
      "parameters": {
        "jsCode": "/**\n * Este código recupera os backups do repositório GitHub,\n * cujos arquivos foram salvos na pasta definida em $('n8n Backups').first().json.stdout.\n * Ele retorna:\n *  - credentials: um array com os conteúdos JSON de cada arquivo na pasta \"credentials\"\n *  - workflows: um array com os conteúdos JSON de cada arquivo na pasta \"workflows\"\n *  - schema: o conteúdo JSON do arquivo \"schema.json\"\n *\n * As requisições são autenticadas usando o token obtido do nó \"Convert Files\" (item com data.type === 'githubApi').\n */\n\n// Importa o axios para as requisições HTTP\nconst axios = require('axios');\n\n// Configurações iniciais\nconst basePath = $('n8n Backups').first().json.stdout;\nconst globalVars = $('Get Global Vars').first().json;\nconst owner = globalVars.github_username;\nconst repo = globalVars.github_repository;\n\n// Obtém o token de acesso do GitHub do nó \"Convert Files\"\nconst convertItems = $('Convert Files').all();\nconst githubItem = convertItems.find(item => item.json.data.type === 'githubApi');\nif (!githubItem) {\n  throw new Error(\"Nenhum item com type 'githubApi' foi encontrado em Convert Files.\");\n}\nconst accessToken = githubItem.json.data.data.accessToken;\n\n// Função para fazer GET em um caminho do repositório e retornar o objeto (ou array) JSON com o conteúdo do arquivo\nasync function getFileContent(path) {\n  const url = `https://api.github.com/repos/${owner}/${repo}/contents/${encodeURIComponent(path)}`;\n  const response = await axios.get(url, {\n    headers: {\n      Authorization: `Bearer ${accessToken}`,\n      Accept: 'application/vnd.github.v3+json'\n    }\n  });\n  // A API retorna um objeto com a propriedade \"content\" (base64 encoded)\n  const contentBase64 = response.data.content;\n  // Remove quebras de linha se existirem e decodifica\n  const contentStr = Buffer.from(contentBase64.replace(/\\n/g, ''), 'base64').toString('utf8');\n  return contentStr;\n}\n\n// Função para listar os arquivos de um diretório e retornar um array de caminhos\nasync function listDirectoryFiles(path) {\n  const url = `https://api.github.com/repos/${owner}/${repo}/contents/${encodeURIComponent(path)}`;\n  const response = await axios.get(url, {\n    headers: {\n      Authorization: `Bearer ${accessToken}`,\n      Accept: 'application/vnd.github.v3+json'\n    }\n  });\n  // A resposta é um array de objetos, cada um representando um arquivo (ou subdiretório)\n  // Filtramos apenas os arquivos (type === 'file')\n  return response.data.filter(item => item.type === 'file');\n}\n\n// Função que obtém e parseia todos os arquivos de um diretório (esperando JSON)\nasync function getDirectoryJSON(path) {\n  const files = await listDirectoryFiles(path);\n  const results = [];\n  for (let file of files) {\n    try {\n      const contentStr = await getFileContent(file.path);\n      // Tenta fazer o parse; se der erro, guarda o texto bruto\n      const parsed = JSON.parse(contentStr);\n      results.push(parsed);\n    } catch (e) {\n      // Se não for JSON, podemos armazenar o conteúdo bruto ou tratar de outra forma\n      results.push({ error: \"Erro no parse JSON\", raw: contentStr });\n    }\n  }\n  return results;\n}\n\n// Função principal para recuperar os backups e parseá-los\nasync function main() {\n  // Monta os caminhos:\n  // As credenciais estarão na pasta: {basePath}/credentials\n  // Os workflows estarão na pasta: {basePath}/workflows\n  // O schema estará em: {basePath}/schema.json\n  const credentialsPath = `${basePath}/credentials`;\n  const workflowsPath = `${basePath}/workflows`;\n  const schemaPath = `${basePath}/schema.json`;\n\n  // Obtém os arquivos e parseia-os\n  let credentials = [];\n  let workflows = [];\n  let schema = null;\n  \n  try {\n    credentials = await getDirectoryJSON(credentialsPath);\n  } catch (e) {\n    console.error(\"Erro ao recuperar arquivos de credentials:\", e);\n  }\n  \n  try {\n    workflows = await getDirectoryJSON(workflowsPath);\n  } catch (e) {\n    console.error(\"Erro ao recuperar arquivos de workflows:\", e);\n  }\n  \n  try {\n    const schemaContentStr = await getFileContent(schemaPath);\n    schema = JSON.parse(schemaContentStr);\n  } catch (e) {\n    console.error(\"Erro ao recuperar ou parsear schema:\", e);\n    schema = { error: \"Erro ao recuperar ou parsear schema\", raw: null };\n  }\n  \n  // Retorna os resultados já parseados\n  return [{ json: { credentials, workflows, schema } }];\n}\n\n// Executa a função principal e retorna o resultado\nreturn main();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        820,
        2080
      ],
      "id": "52bf4282-a8fb-4a9d-8367-93cd9239f2d3",
      "name": "Get Backups",
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "/**\n * Código final para:\n *   - Criar as credenciais e workflows no n8n a partir dos backups, somente se eles ainda não existirem.\n *   - Atualizar o schema do Directus aplicando o diff do backup.\n *\n * Requisitos:\n * - O nó \"Get Backups\" deve retornar um JSON com a estrutura:\n *     { \n *       credentials: [ { name, type, data, ... }, ... ],\n *       workflows: [ { name, nodes, connections, ... }, ... ],\n *       schema: { ... }\n *     }\n *\n * - O nó \"Convert Files\" deve retornar vários itens; dentre eles, o item com data.type === 'n8nApi'\n *   contém o token da n8n API (campo data.data.apiKey) e os demais itens possuem a propriedade data.name,\n *   que representam os itens atuais (credenciais e workflows) do n8n.\n *\n * - O nó \"Get Global Vars\" possui o token do Directus em directus_token.\n *\n * Endpoints:\n *   - n8n API: http://n8n_editor:5678/api/v1\n *       * POST /credentials: { name, type, data }\n *       * POST /workflows: { name, nodes, connections, settings }\n *   - Directus:\n *       * Diff: POST http://directus:8055/schema/diff?force=true  \n *              (payload: backup schema; retorno: { data: { hash, diff, ... } })\n *       * Apply: POST http://directus:8055/schema/apply  \n *              (payload: o objeto retornado em data do diff)\n *\n * Logs detalhados são gerados para cada etapa e um delay de 1 segundo é aplicado entre operações.\n *\n * A variável interna advancedLogsEnabled controla se a chave advancedLogs será incluída nos resultados.\n */\n\nconst axios = require('axios');\n\n// ----------------------------------------------------------------------\n// Configurações Gerais (hardcoded)\n// ----------------------------------------------------------------------\nconst advancedLogsEnabled = false; // Altere para true para incluir logs avançados\n\n// Função de delay\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n// ----------------------------------------------------------------------\n// 1. Obter dados e tokens\n// ----------------------------------------------------------------------\n\n// Backup dos itens a partir do nó \"Get Backups\"\nconst backupData = $('Get Backups').first().json; \n// Estrutura esperada: { credentials: [...], workflows: [...], schema: { ... } }\n\n// Itens atuais do n8n (para verificação de nomes) a partir do nó \"Convert Files\"\nconst currentItems = $('Convert Files').all();  \n// Cada item tem em item.json.data.name\n\n// Token da n8n API: busca o item cujo data.type === 'n8nApi'\nconst n8nApiItem = currentItems.find(item => item.json.data.type === 'n8nApi');\nif (!n8nApiItem) {\n  throw new Error(\"Nenhum item com type 'n8nApi' foi encontrado em Convert Files.\");\n}\nconst n8nApiToken = n8nApiItem.json.data.data.apiKey;\nconsole.log(`Token da n8n API obtido: ${n8nApiToken}`);\n\n// Token do Directus: obtido do nó \"Get Global Vars\"\nconst globalVars = $('Get Global Vars').first().json;\nconst directusToken = globalVars.directus_token;\nconsole.log(`Token do Directus obtido: ${directusToken}`);\n\n// Endpoints base\nconst n8nBaseUrl = 'http://n8n_editor:5678/api/v1';\nconst directusBaseUrl = 'http://directus:8055';\n\n// ----------------------------------------------------------------------\n// 2. Funções auxiliares para chamadas HTTP\n// ----------------------------------------------------------------------\n\n// Função para criar uma credencial no n8n via POST\nasync function createN8nCredential(payload) {\n  const url = `${n8nBaseUrl}/credentials`;\n  const response = await axios.post(url, payload, { \n    headers: { \n      \"X-N8N-API-KEY\": n8nApiToken, \n      \"Content-Type\": \"application/json\" \n    } \n  });\n  return response.data;\n}\n\n// Função para criar um workflow no n8n via POST\nasync function createN8nWorkflow(payload) {\n  const url = `${n8nBaseUrl}/workflows`;\n  const response = await axios.post(url, payload, { \n    headers: { \n      \"X-N8N-API-KEY\": n8nApiToken, \n      \"Content-Type\": \"application/json\" \n    } \n  });\n  return response.data;\n}\n\n// Função para obter o diff do schema do Directus via POST\nasync function diffDirectusSchema(schemaBackup) {\n  const url = `${directusBaseUrl}/schema/diff?force=true`;\n  const response = await axios.post(url, schemaBackup, { \n    headers: { \n      Authorization: `Bearer ${directusToken}`, \n      \"Content-Type\": \"application/json\" \n    } \n  });\n  // Retorna o objeto diff (que estará na propriedade \"data\" do response)\n  return response.data;\n}\n\n// Função para aplicar o diff no schema do Directus via POST\nasync function applyDirectusSchema(diffData) {\n  const url = `${directusBaseUrl}/schema/apply`;\n  const response = await axios.post(url, diffData, { \n    headers: { \n      Authorization: `Bearer ${directusToken}`, \n      \"Content-Type\": \"application/json\" \n    } \n  });\n  return response.data;\n}\n\n// ----------------------------------------------------------------------\n// 3. Função principal para recriar itens e atualizar o schema\n// ----------------------------------------------------------------------\nasync function main() {\n  const logs = [];\n  \n  // 3.1 Criar Credenciais\n  const backupCredentials = backupData.credentials || [];\n  for (let cred of backupCredentials) {\n    // Verifica se já existe uma credencial com o mesmo nome entre os itens atuais (usando data.name)\n    const exists = currentItems.find(item => item.json.data.name === cred.name);\n    if (exists) {\n      logs.push({ message: `Credencial '${cred.name}' já existe. Ignorada.` });\n      continue;\n    }\n    // Prepara o payload para criação da credencial.\n    // O endpoint espera que o campo \"data\" seja um objeto.\n    const payload = {\n      name: cred.name,\n      type: cred.type,\n      data: cred.data\n    };\n    try {\n      logs.push({ message: `Criando credencial '${cred.name}'...`, payload });\n      const result = await createN8nCredential(payload);\n      logs.push({ message: `Credencial '${cred.name}' criada com sucesso.`, result });\n    } catch (error) {\n      logs.push({ \n        message: `Erro ao criar credencial '${cred.name}'.`, \n        error: error.toString(), \n        details: error.response ? error.response.data : null \n      });\n    }\n    await delay(1000);\n  }\n  \n  // 3.2 Criar Workflows\n  const backupWorkflows = backupData.workflows || [];\n  for (let wf of backupWorkflows) {\n    // Para workflows, identificamos pela presença da key \"nodes\" em wf.data (ou diretamente wf, conforme backup)\n    // Verifica se já existe um workflow com o mesmo nome entre os itens atuais\n    const exists = currentItems.find(item => item.json.data.name === wf.name);\n    if (exists) {\n      logs.push({ message: `Workflow '${wf.name}' já existe. Ignorado.` });\n      continue;\n    }\n    // Prepara o payload para criação do workflow.\n    // **Importante:** Incluímos \"settings\": {} pois é uma propriedade obrigatória.\n    const payload = {\n      name: wf.name,\n      nodes: wf.nodes,\n      connections: wf.connections,\n      settings: {}\n    };\n    try {\n      logs.push({ message: `Criando workflow '${wf.name}'...`, payload });\n      const result = await createN8nWorkflow(payload);\n      logs.push({ message: `Workflow '${wf.name}' criado com sucesso.`, result });\n    } catch (error) {\n      logs.push({ \n        message: `Erro ao criar workflow '${wf.name}'.`, \n        error: error.toString(), \n        details: error.response ? error.response.data : null \n      });\n    }\n    await delay(1000);\n  }\n  \n  // 3.3 Atualizar Schema do Directus\n  // O backup do schema vem de backupData.schema\n  let diffData = null;\n  let attempts = 0;\n  const maxAttempts = 3;\n  while (attempts < maxAttempts) {\n    try {\n      logs.push({ message: \"Obtendo diff do schema do Directus...\", backupSchema: backupData.schema });\n      diffData = await diffDirectusSchema(backupData.schema);\n      // O diffData esperado possui a propriedade \"data\" com { hash, diff, ... }\n      logs.push({ message: \"Diff do schema obtido com sucesso.\", diffData });\n      break;\n    } catch (error) {\n      attempts++;\n      logs.push({ \n        message: `Erro ao obter diff do schema (tentativa ${attempts} de ${maxAttempts}).`, \n        error: error.toString(), \n        details: error.response ? error.response.data : null \n      });\n      await delay(2000);\n    }\n  }\n  \n  if (diffData && diffData.data) {\n    try {\n      logs.push({ message: \"Aplicando diff no schema do Directus...\", diffData: diffData.data });\n      // Envia somente a propriedade \"data\" como payload para aplicar o schema\n      const updatedSchema = await applyDirectusSchema(diffData.data);\n      logs.push({ message: \"Schema do Directus atualizado com sucesso.\", updatedSchema });\n    } catch (error) {\n      logs.push({ \n        message: \"Erro ao aplicar diff no schema do Directus.\", \n        error: error.toString(), \n        details: error.response ? error.response.data : null \n      });\n    }\n  } else {\n    logs.push({ message: \"Nenhum diff obtido; o schema não foi alterado.\" });\n  }\n  \n  return logs;\n}\n\nreturn main().then(logs => logs.map(log => ({ json: log })));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1020,
        2080
      ],
      "id": "d850d720-fd09-40c4-b2e0-2abb10d04c0e",
      "name": "Recover Backup",
      "disabled": true
    },
    {
      "parameters": {
        "content": "",
        "height": 300,
        "width": 500,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        720,
        1980
      ],
      "id": "b65c64ff-3b4d-48f4-9490-335583324e40",
      "name": "Sticky Note18"
    },
    {
      "parameters": {
        "content": "Gerencia seus backups no GitHub\n[Gere o seu Personal access tokens](https://github.com/settings/tokens)",
        "height": 80,
        "width": 260,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        740,
        1240
      ],
      "id": "946d2c75-7698-4ea5-9830-640399f8bb01",
      "name": "Sticky Note19"
    },
    {
      "parameters": {
        "content": "Recupera suas credenciais, workflows e schema do Directus",
        "height": 80,
        "width": 260,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        940,
        1940
      ],
      "id": "172312c8-199f-4f40-90b2-e354b09e4e99",
      "name": "Sticky Note20"
    },
    {
      "parameters": {
        "content": "",
        "height": 340,
        "width": 540,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        700,
        1960
      ],
      "typeVersion": 1,
      "id": "bfe9881e-8e38-479d-b828-9e99ad5f15bf",
      "name": "Sticky Note21"
    },
    {
      "parameters": {
        "content": "Executa o workflow a cada 1 Hora",
        "height": 80,
        "width": 260,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -380,
        1060
      ],
      "id": "d2574491-da90-4084-93b8-0f2cdc57adcc",
      "name": "Sticky Note22"
    },
    {
      "parameters": {
        "content": "",
        "height": 700,
        "width": 1100,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        720,
        1260
      ],
      "id": "ade67bb7-aa44-4658-bf31-0818175cb244",
      "name": "Sticky Note23"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -300,
        1180
      ],
      "id": "3eec04d3-8bd6-4175-9e1f-984e2d4df006",
      "name": "1H Schedule Trigger"
    }
  ],
  "connections": {
    "Chatwoot Input": {
      "main": [
        [
          {
            "node": "Switch ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch ": {
      "main": [
        [
          {
            "node": "Sender",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DLX Consumer": {
      "main": [
        [
          {
            "node": "Reset List ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Models": {
      "main": [
        [
          {
            "node": "Update Options",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Global Vars": {
      "main": [
        [
          {
            "node": "Get Models",
            "type": "main",
            "index": 0
          },
          {
            "node": "n8n Backups",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Listen Insert Users": {
      "main": [
        [
          {
            "node": "Get Global Vars 2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Picture": {
      "main": [
        [
          {
            "node": "Upload Picture",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Global Vars 2": {
      "main": [
        [
          {
            "node": "Download Picture",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload Picture": {
      "main": [
        [
          {
            "node": "Add Picture",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "n8n Backups": {
      "main": [
        [
          {
            "node": "Get Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Files": {
      "main": [
        [
          {
            "node": "Convert Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert Files": {
      "main": [
        [
          {
            "node": "Get n8n Backups",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Schema",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Stacks",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Backups",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set n8n Backups": {
      "main": [
        []
      ]
    },
    "Get n8n Backups": {
      "main": [
        [
          {
            "node": "Append",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update GitHub": {
      "main": [
        [
          {
            "node": "Set n8n Backups",
            "type": "main",
            "index": 0
          },
          {
            "node": "Set Stacks Backups",
            "type": "main",
            "index": 0
          },
          {
            "node": "Set Schema Backup",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Schema": {
      "main": [
        [
          {
            "node": "Get Schema Backup",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Schema Backup": {
      "main": [
        [
          {
            "node": "Append",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Get Stacks Backups": {
      "main": [
        [
          {
            "node": "Append",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Set Stacks Backups": {
      "main": [
        []
      ]
    },
    "Append": {
      "main": [
        [
          {
            "node": "Update GitHub",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Stacks": {
      "main": [
        [
          {
            "node": "Get Stacks Backups",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Schema Backup": {
      "main": [
        [],
        []
      ]
    },
    "Get Backups": {
      "main": [
        [
          {
            "node": "Recover Backup",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "1H Schedule Trigger": {
      "main": [
        [
          {
            "node": "Get Global Vars",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {
    "node:Schedule Trigger": {
      "recurrenceRules": []
    },
    "node:1D Schedule Trigger": {
      "recurrenceRules": []
    },
    "node:1H Schedule Trigger": {
      "recurrenceRules": []
    }
  },
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {
    "Chatwoot Input": [
      {
        "json": {
          "headers": {
            "accept": "application/json",
            "user-agent": "rest-client/2.1.0 (linux-musl x86_64) ruby/3.3.3p89",
            "content-type": "application/json",
            "content-length": "4117",
            "accept-encoding": "gzip;q=1.0,deflate;q=0.6,identity;q=0.3",
            "host": "n8n_webhook:5678"
          },
          "params": {},
          "query": {},
          "body": {
            "account": {
              "id": 7,
              "name": "Bitliv"
            },
            "additional_attributes": {},
            "content_attributes": {},
            "content_type": "text",
            "content": "cuzinho",
            "conversation": {
              "additional_attributes": {},
              "can_reply": true,
              "channel": "Channel::Api",
              "contact_inbox": {
                "id": 38,
                "contact_id": 16,
                "inbox_id": 3,
                "source_id": "44e41b18-7d9b-47ce-be95-a081c7e5c2ab",
                "created_at": "2025-01-29T00:05:23.047Z",
                "updated_at": "2025-01-29T00:05:23.047Z",
                "hmac_verified": false,
                "pubsub_token": "cc2nyw38tG7gA9pW37Y9nrpk"
              },
              "id": 21,
              "inbox_id": 3,
              "messages": [
                {
                  "id": 243,
                  "content": "cuzinho",
                  "account_id": 7,
                  "inbox_id": 3,
                  "conversation_id": 21,
                  "message_type": 0,
                  "created_at": 1738138562,
                  "updated_at": "2025-01-29T08:16:02.878Z",
                  "private": false,
                  "status": "sent",
                  "source_id": "WAID:3FB67A92FEBDE9E7C85E",
                  "content_type": "text",
                  "content_attributes": {},
                  "sender_type": "Contact",
                  "sender_id": 16,
                  "external_source_ids": {},
                  "additional_attributes": {},
                  "processed_message_content": "cuzinho",
                  "sentiment": {},
                  "conversation": {
                    "assignee_id": null,
                    "unread_count": 2,
                    "last_activity_at": 1738138562,
                    "contact_inbox": {
                      "source_id": "44e41b18-7d9b-47ce-be95-a081c7e5c2ab"
                    }
                  },
                  "sender": {
                    "additional_attributes": {},
                    "custom_attributes": {},
                    "email": null,
                    "id": 16,
                    "identifier": "5511948182061@s.whatsapp.net",
                    "name": "Pedro Nascimento",
                    "phone_number": "+5511948182061",
                    "thumbnail": "https://chat.dev.bitliv.ai/rails/active_storage/representations/redirect/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBUQT09IiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--75183fee143fbc1df269a26d5ac37283aabf0fc2/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaDdCem9MWm05eWJXRjBTU0lJYW5CbkJqb0dSVlE2RTNKbGMybDZaVjkwYjE5bWFXeHNXd2RwQWZvdyIsImV4cCI6bnVsbCwicHVyIjoidmFyaWF0aW9uIn19--6484a55b320d84cf2c55376cc120444713caa4ca/427790916_1067752487616081_8626231362871951246_n.jpg",
                    "type": "contact"
                  }
                }
              ],
              "labels": [],
              "meta": {
                "sender": {
                  "additional_attributes": {},
                  "custom_attributes": {},
                  "email": null,
                  "id": 16,
                  "identifier": "5511948182061@s.whatsapp.net",
                  "name": "Pedro Nascimento",
                  "phone_number": "+5511948182061",
                  "thumbnail": "https://chat.dev.bitliv.ai/rails/active_storage/representations/redirect/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBUQT09IiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--75183fee143fbc1df269a26d5ac37283aabf0fc2/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaDdCem9MWm05eWJXRjBTU0lJYW5CbkJqb0dSVlE2RTNKbGMybDZaVjkwYjE5bWFXeHNXd2RwQWZvdyIsImV4cCI6bnVsbCwicHVyIjoidmFyaWF0aW9uIn19--6484a55b320d84cf2c55376cc120444713caa4ca/427790916_1067752487616081_8626231362871951246_n.jpg",
                  "type": "contact"
                },
                "assignee": null,
                "team": null,
                "hmac_verified": false
              },
              "status": "pending",
              "custom_attributes": {},
              "snoozed_until": null,
              "unread_count": 2,
              "first_reply_created_at": "2025-01-29T00:05:29.403Z",
              "priority": null,
              "waiting_since": 1738109166,
              "agent_last_seen_at": 1738138216,
              "contact_last_seen_at": 1738110373,
              "last_activity_at": 1738138562,
              "timestamp": 1738138562,
              "created_at": 1738109123
            },
            "created_at": "2025-01-29T08:16:02.878Z",
            "id": 243,
            "inbox": {
              "id": 3,
              "name": "anna"
            },
            "message_type": "incoming",
            "status": "sent",
            "private": false,
            "sender": {
              "account": {
                "id": 7,
                "name": "Bitliv"
              },
              "additional_attributes": {},
              "avatar": "https://chat.dev.bitliv.ai/rails/active_storage/representations/redirect/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBUQT09IiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--75183fee143fbc1df269a26d5ac37283aabf0fc2/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaDdCem9MWm05eWJXRjBTU0lJYW5CbkJqb0dSVlE2RTNKbGMybDZaVjkwYjE5bWFXeHNXd2RwQWZvdyIsImV4cCI6bnVsbCwicHVyIjoidmFyaWF0aW9uIn19--6484a55b320d84cf2c55376cc120444713caa4ca/427790916_1067752487616081_8626231362871951246_n.jpg",
              "custom_attributes": {},
              "email": null,
              "id": 16,
              "identifier": "5511948182061@s.whatsapp.net",
              "name": "Pedro Nascimento",
              "phone_number": "+5511948182061",
              "thumbnail": "https://chat.dev.bitliv.ai/rails/active_storage/representations/redirect/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBUQT09IiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--75183fee143fbc1df269a26d5ac37283aabf0fc2/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaDdCem9MWm05eWJXRjBTU0lJYW5CbkJqb0dSVlE2RTNKbGMybDZaVjkwYjE5bWFXeHNXd2RwQWZvdyIsImV4cCI6bnVsbCwicHVyIjoidmFyaWF0aW9uIn19--6484a55b320d84cf2c55376cc120444713caa4ca/427790916_1067752487616081_8626231362871951246_n.jpg"
            },
            "source_id": "WAID:3FB67A92FEBDE9E7C85E",
            "event": "message_created"
          },
          "webhookUrl": "https://whk.dev.bitliv.ai/webhook/chatwoot",
          "executionMode": "production"
        }
      }
    ],
    "DLX Consumer": [
      {
        "json": {
          "headers": {
            "accept": "application/json",
            "user-agent": "rest-client/2.1.0 (linux-musl x86_64) ruby/3.3.3p89",
            "content-type": "application/json",
            "content-length": "4083",
            "accept-encoding": "gzip;q=1.0,deflate;q=0.6,identity;q=0.3",
            "host": "n8n_webhook:5678"
          },
          "params": {},
          "query": {},
          "body": {
            "account": {
              "id": 7,
              "name": "Bitliv"
            },
            "additional_attributes": {},
            "content_attributes": {},
            "content_type": "text",
            "content": "Opa",
            "conversation": {
              "additional_attributes": {},
              "can_reply": true,
              "channel": "Channel::Api",
              "contact_inbox": {
                "id": 40,
                "contact_id": 20,
                "inbox_id": 3,
                "source_id": "5d5d4f1c-7984-4837-8af9-c3a71103b481",
                "created_at": "2025-01-29T13:51:26.235Z",
                "updated_at": "2025-01-29T13:51:26.235Z",
                "hmac_verified": false,
                "pubsub_token": "b2sj6PM6yh4KigW6GGpMGTbo"
              },
              "id": 22,
              "inbox_id": 3,
              "messages": [
                {
                  "id": 302,
                  "content": "Opa",
                  "account_id": 7,
                  "inbox_id": 3,
                  "conversation_id": 22,
                  "message_type": 0,
                  "created_at": 1738159352,
                  "updated_at": "2025-01-29T14:02:32.814Z",
                  "private": false,
                  "status": "sent",
                  "source_id": "WAID:3F4E141C3F6A488CBC16",
                  "content_type": "text",
                  "content_attributes": {},
                  "sender_type": "Contact",
                  "sender_id": 20,
                  "external_source_ids": {},
                  "additional_attributes": {},
                  "processed_message_content": "Opa",
                  "sentiment": {},
                  "conversation": {
                    "assignee_id": null,
                    "unread_count": 1,
                    "last_activity_at": 1738159352,
                    "contact_inbox": {
                      "source_id": "5d5d4f1c-7984-4837-8af9-c3a71103b481"
                    }
                  },
                  "sender": {
                    "additional_attributes": {},
                    "custom_attributes": {},
                    "email": null,
                    "id": 20,
                    "identifier": "5511948182061@s.whatsapp.net",
                    "name": "Pedro Nascimento",
                    "phone_number": "+5511948182061",
                    "thumbnail": "https://chat.dev.bitliv.ai/rails/active_storage/representations/redirect/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBUZz09IiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--5774cee1b3eb6d7c690d8f189a648469bcecd1e9/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaDdCem9MWm05eWJXRjBTU0lJYW5CbkJqb0dSVlE2RTNKbGMybDZaVjkwYjE5bWFXeHNXd2RwQWZvdyIsImV4cCI6bnVsbCwicHVyIjoidmFyaWF0aW9uIn19--6484a55b320d84cf2c55376cc120444713caa4ca/427790916_1067752487616081_8626231362871951246_n.jpg",
                    "type": "contact"
                  }
                }
              ],
              "labels": [],
              "meta": {
                "sender": {
                  "additional_attributes": {},
                  "custom_attributes": {},
                  "email": null,
                  "id": 20,
                  "identifier": "5511948182061@s.whatsapp.net",
                  "name": "Pedro Nascimento",
                  "phone_number": "+5511948182061",
                  "thumbnail": "https://chat.dev.bitliv.ai/rails/active_storage/representations/redirect/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBUZz09IiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--5774cee1b3eb6d7c690d8f189a648469bcecd1e9/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaDdCem9MWm05eWJXRjBTU0lJYW5CbkJqb0dSVlE2RTNKbGMybDZaVjkwYjE5bWFXeHNXd2RwQWZvdyIsImV4cCI6bnVsbCwicHVyIjoidmFyaWF0aW9uIn19--6484a55b320d84cf2c55376cc120444713caa4ca/427790916_1067752487616081_8626231362871951246_n.jpg",
                  "type": "contact"
                },
                "assignee": null,
                "team": null,
                "hmac_verified": false
              },
              "status": "pending",
              "custom_attributes": {},
              "snoozed_until": null,
              "unread_count": 1,
              "first_reply_created_at": null,
              "priority": null,
              "waiting_since": 1738158686,
              "agent_last_seen_at": 1738159351,
              "contact_last_seen_at": 1738159351,
              "last_activity_at": 1738159352,
              "timestamp": 1738159352,
              "created_at": 1738158686
            },
            "created_at": "2025-01-29T14:02:32.814Z",
            "id": 302,
            "inbox": {
              "id": 3,
              "name": "anna"
            },
            "message_type": "incoming",
            "status": "sent",
            "private": false,
            "sender": {
              "account": {
                "id": 7,
                "name": "Bitliv"
              },
              "additional_attributes": {},
              "avatar": "https://chat.dev.bitliv.ai/rails/active_storage/representations/redirect/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBUZz09IiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--5774cee1b3eb6d7c690d8f189a648469bcecd1e9/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaDdCem9MWm05eWJXRjBTU0lJYW5CbkJqb0dSVlE2RTNKbGMybDZaVjkwYjE5bWFXeHNXd2RwQWZvdyIsImV4cCI6bnVsbCwicHVyIjoidmFyaWF0aW9uIn19--6484a55b320d84cf2c55376cc120444713caa4ca/427790916_1067752487616081_8626231362871951246_n.jpg",
              "custom_attributes": {},
              "email": null,
              "id": 20,
              "identifier": "5511948182061@s.whatsapp.net",
              "name": "Pedro Nascimento",
              "phone_number": "+5511948182061",
              "thumbnail": "https://chat.dev.bitliv.ai/rails/active_storage/representations/redirect/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBUZz09IiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--5774cee1b3eb6d7c690d8f189a648469bcecd1e9/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaDdCem9MWm05eWJXRjBTU0lJYW5CbkJqb0dSVlE2RTNKbGMybDZaVjkwYjE5bWFXeHNXd2RwQWZvdyIsImV4cCI6bnVsbCwicHVyIjoidmFyaWF0aW9uIn19--6484a55b320d84cf2c55376cc120444713caa4ca/427790916_1067752487616081_8626231362871951246_n.jpg"
            },
            "source_id": "WAID:3F4E141C3F6A488CBC16",
            "event": "message_created"
          },
          "webhookUrl": "https://whk.dev.bitliv.ai/webhook/chatwoot",
          "executionMode": "production"
        }
      }
    ],
    "Listen Insert Users": [
      {
        "json": {
          "length": 612,
          "processId": 81871,
          "channel": "n8n_channel_64d5906f_6c9a_44ab_ac26_25d37efb2905",
          "payload": {
            "id": 29,
            "date_created": "2025-01-31T16:32:52.151558+00:00",
            "date_updated": null,
            "picture_url": "https://chat.dev.bitliv.ai/rails/active_storage/representations/redirect/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBBWUE9IiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--2eb3908b5712cea78bde77b3da9a5225734ecf70/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaDdCem9MWm05eWJXRjBTU0lJYW5CbkJqb0dSVlE2RTNKbGMybDZaVjkwYjE5bWFXeHNXd2RwQWZvdyIsImV4cCI6bnVsbCwicHVyIjoidmFyaWF0aW9uIn19--6484a55b320d84cf2c55376cc120444713caa4ca/427790916_1067752487616081_8626231362871951246_n.jpg",
            "picture": null
          },
          "name": "notification"
        }
      }
    ],
    "1H Schedule Trigger": [
      {
        "json": {
          "timestamp": "2025-02-04T09:00:15.076-03:00",
          "Readable date": "February 4th 2025, 9:00:15 am",
          "Readable time": "9:00:15 am",
          "Day of week": "Tuesday",
          "Year": "2025",
          "Month": "February",
          "Day of month": "04",
          "Hour": "09",
          "Minute": "00",
          "Second": "15",
          "Timezone": "America/Sao_Paulo (UTC-03:00)"
        }
      }
    ]
  },
  "versionId": "f49a5266-fcec-44dc-b3b6-99683c1659e7",
  "triggerCount": 4,
  "tags": [
    {
      "createdAt": "2025-01-30T17:03:36.094Z",
      "updatedAt": "2025-01-30T17:03:36.094Z",
      "id": "0Zi4XIcBRQAtlr7Z",
      "name": "Anna's project"
    },
    {
      "createdAt": "2025-01-30T17:03:24.799Z",
      "updatedAt": "2025-01-30T17:03:24.799Z",
      "id": "yX83KwSzm9VQnrU1",
      "name": "development"
    }
  ]
}