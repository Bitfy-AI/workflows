{
  "createdAt": "2025-01-25T12:07:34.449Z",
  "updatedAt": "2025-02-06T13:53:38.332Z",
  "id": "4NoK6P9qxRkJzCvU",
  "name": "[Anna] v2",
  "active": true,
  "nodes": [
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.body.mapping.parseJson().system.conversations_id }}",
        "tableName": "core_chat_histories",
        "contextWindowLength": "={{ $json.body.mapping.parseJson().system.context_window }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        1320,
        1580
      ],
      "id": "eba64d47-8f88-48d6-8b6a-bca4629deb8b",
      "name": "Memory",
      "credentials": {
        "postgres": {
          "id": "1Jj8ddykbvqPSFOp",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "content": "",
        "width": 400,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1160,
        1540
      ],
      "typeVersion": 1,
      "id": "d2a433ce-9c89-4fe2-9fbf-662169e66a0d",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.body.content || '' }}",
        "options": {
          "systemMessage": "You are a helpful assistant",
          "passthroughBinaryImages": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        1460,
        1320
      ],
      "id": "caa20e44-11ed-4bd9-84d0-6babe8bf6317",
      "name": "Main Agent"
    },
    {
      "parameters": {
        "operation": "push",
        "list": "={{ $('Mapping').first().json.chatwoot.contact_id.toString() }}",
        "messageData": "={{ JSON.stringify({\n    'content': $('Mapping').first().json.chatwoot.content,\n    'data_url': $('Mapping').first().json.chatwoot.data_url,\n    'timestamp': $now,\n    'message_id': $('Mapping').first().json.chatwoot.message_id\n}) }}",
        "tail": true
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -300,
        680
      ],
      "id": "f38efd9f-18ce-4c0c-98b4-7983a19e7de0",
      "name": "Add to List",
      "credentials": {
        "redis": {
          "id": "QMizCbyGR7YJ92UI",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "data",
        "key": "={{ $('Mapping').first().json.chatwoot.contact_id.toString() }}",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -100,
        680
      ],
      "id": "2b512577-c712-425a-b6bd-1b0d6841e09f",
      "name": "Get List",
      "credentials": {
        "redis": {
          "id": "QMizCbyGR7YJ92UI",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        300,
        480
      ],
      "id": "31dc41d2-ba03-4e7a-b3d8-0251d3df8e8a",
      "name": "No Operation"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -120,
        1300
      ],
      "id": "8508753a-1eb9-4d07-9fc3-a171ba5a866f",
      "name": "No Operation 0"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"data\": {{ \n    (() => {\n      const sourceNodeName = $('Get Final List 2').isExecuted ? 'Get Final List 2' : $prevNode.name;\n      const data = $(sourceNodeName).first().json.data;\n      const uniqueIds = new Set();\n      const messages = [];\n\n      data.reduce((_, buffer) => {\n        const parsed = JSON.parse(buffer);\n        if (!uniqueIds.has(parsed.message_id)) {\n          uniqueIds.add(parsed.message_id);\n\n          let index = messages.findIndex(msg => msg.message_id > parsed.message_id);\n          if (index === -1) index = messages.length;\n          messages.splice(index, 0, parsed);\n        }\n      }, []);\n\n      return messages.reduce((acc, msg) => {\n        delete msg.message_id;\n        acc.push({ content: msg, loop_reset: true });\n        return acc;\n      }, []);\n\n    })()\n  }}\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        700,
        780
      ],
      "id": "56c62db7-ba58-43d5-a741-90a3f788e2fb",
      "name": "Parse JSON"
    },
    {
      "parameters": {
        "fieldToSplitOut": "data",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        900,
        780
      ],
      "id": "f6938961-3079-4917-9a71-afa7cdee37c9",
      "name": "Split Itens"
    },
    {
      "parameters": {
        "options": {
          "reset": "={{ $json.loop_reset }}"
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -1100,
        1300
      ],
      "id": "2557f44f-a46d-4be9-9fbb-54445cd3adc5",
      "name": "Loop"
    },
    {
      "parameters": {
        "url": "={{ $json.content.data_url }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -700,
        1300
      ],
      "id": "287e6687-337c-4e05-bc09-c3c3a5708a3e",
      "name": "Download Media"
    },
    {
      "parameters": {
        "mode": "expression",
        "numberOutputs": 3,
        "output": "={{\n  $binary.data?.fileExtension === 'oga' \n    ? 0 \n    : !$binary.data || ['png', 'jpg', 'jpeg'].includes($binary.data.fileExtension)\n      ? 1 \n      : $binary.data.fileExtension === 'pdf' \n        ? 2 \n        : 3\n}}"
      },
      "id": "fafc6665-bdb2-4bc8-8e73-3e97fd6ecee7",
      "name": "Switch 02",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -500,
        1300
      ]
    },
    {
      "parameters": {
        "content": "",
        "height": 600,
        "width": 2300,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1200,
        380
      ],
      "typeVersion": 1,
      "id": "3890e33b-6500-44d7-8045-200c46b52135",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "",
        "height": 1360,
        "width": 2340,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1220,
        360
      ],
      "typeVersion": 1,
      "id": "235863e6-541c-44bf-a7a1-6487b692c76e",
      "name": "Sticky Note2"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        1820,
        1320
      ],
      "id": "e58ddba9-7d2d-426a-a322-9e4d7de3c2df",
      "name": "No Operation 2"
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "={{ $('Mapping').first().json.chatwoot.contact_id.toString() }}"
      },
      "id": "384e7cbb-da65-4ed7-b144-3fd3b80f402b",
      "name": "Reset List",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        500,
        1300
      ],
      "notesInFlow": false,
      "credentials": {
        "redis": {
          "id": "QMizCbyGR7YJ92UI",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "data",
        "key": "={{ $('Mapping').first().json.chatwoot.contact_id.toString() }}",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        100,
        1100
      ],
      "id": "a58746f8-dcd6-4e0d-afb9-76120bdd9e61",
      "name": "Get Final List 2",
      "credentials": {
        "redis": {
          "id": "QMizCbyGR7YJ92UI",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "data",
        "key": "={{ $('Mapping').first().json.chatwoot.contact_id.toString() }}",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        500,
        580
      ],
      "id": "68f9ccba-54cc-45d3-b489-e83cdde81ec8",
      "name": "Get Final List 1",
      "credentials": {
        "redis": {
          "id": "QMizCbyGR7YJ92UI",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "=30"
      },
      "id": "90e3fce7-6625-46c9-9b27-4cf2ced01be5",
      "name": "Reset List 2",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        900,
        580
      ],
      "notesInFlow": false,
      "credentials": {
        "redis": {
          "id": "QMizCbyGR7YJ92UI",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "amount": "={{ \n  $('Mapping').first().json.system.cooldown - $now.diffTo(\n    JSON.parse($('Get List').item.json.data.last()).timestamp,\n    'seconds'\n  )\n}}"
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        300,
        680
      ],
      "id": "4b699b17-228b-4dd1-ad1f-f1ce74a09ea4",
      "name": "Cooldown",
      "webhookId": "816f562a-62f9-4197-b5da-004f01f371fe"
    },
    {
      "parameters": {
        "queue": "main-n8n",
        "options": {
          "acknowledge": "executionFinishesSuccessfully",
          "jsonParseBody": true,
          "onlyContent": true
        }
      },
      "type": "n8n-nodes-base.rabbitmqTrigger",
      "typeVersion": 1,
      "position": [
        -1100,
        580
      ],
      "id": "bf8a1e4f-8f98-41dc-8d9a-d286086c9630",
      "name": "Consumer",
      "credentials": {
        "rabbitmq": {
          "id": "6NHDTRxm1okZ2Rb7",
          "name": "RabbitMQ account"
        }
      }
    },
    {
      "parameters": {
        "mode": "expression",
        "numberOutputs": 2,
        "output": "={{ \n  $node[\"Get Final List 2\"].runIndex === 0\n    ? (\n        JSON.parse($('Get Final List 1').first().json.data.last()).timestamp ===\n        JSON.parse($('Get Final List 2').first().json.data.last()).timestamp\n      ) ? 1 : 0\n    : (\n          JSON.parse($('Get Final List 2').all(0, $runIndex - 0).first().json.data.last()).timestamp ===\n          JSON.parse($('Get Final List 2').all(0, $runIndex - 1).first().json.data.last()).timestamp\n      ) ? 1 : 0\n}}"
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        300,
        1200
      ],
      "id": "a2a6018c-f2d1-4e0d-89d9-189183c39b8d",
      "name": "Switch 3"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "main",
        "responseMode": "lastNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        1260,
        1320
      ],
      "id": "a84bdb0a-c2f0-4ad2-919a-cd2a8f39c74b",
      "name": "Core Input",
      "webhookId": "d503e6f9-0989-42d5-a598-e268b20c3182"
    },
    {
      "parameters": {
        "model": "={{ $json.body.mapping.parseJson().system.models }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        1200,
        1580
      ],
      "id": "25612fc6-0adb-47ea-8f4f-5c8e1f106a9d",
      "name": "OpenRouter",
      "credentials": {
        "openRouterApi": {
          "id": "4la4PkQCJePDK8Rf",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "content": "",
        "height": 300,
        "width": 860,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1160,
        1220
      ],
      "id": "79cb0a5a-0fda-4787-bd59-a7a8817af68c",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "content": "",
        "height": 520,
        "width": 900,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1140,
        1200
      ],
      "typeVersion": 1,
      "id": "325c8cd9-46f0-4a59-9542-0a71c02c3ced",
      "name": "Sticky Note7"
    },
    {
      "parameters": {
        "content": "",
        "height": 700,
        "width": 2300,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1200,
        1000
      ],
      "typeVersion": 1,
      "id": "3aecf5ab-87b5-4291-9d18-5eebbc1928d8",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH\n-- 1) Seleciona o AI Agent associado à conta e à caixa de entrada\nselected_ai AS (\n    SELECT ai.*\n    FROM ai_agents ai\n    WHERE ai.account_id = {{ $json.body.account.id }}\n      AND {{ $json.body.inbox.id }} = ANY(string_to_array(ai.inboxes_ids, ',')::int[])\n    LIMIT 1\n),\n/*\nSeleciona um AI Agent específico baseado no `account_id` e no `inbox.id`.\n- Filtra os agentes pela conta (`account_id`).\n- Converte a string `inboxes_ids` para array de inteiros e verifica se contém o `inbox.id`.\n- Retorna apenas um AI Agent (LIMIT 1).\n*/\n\n-- 2) Seleciona as variáveis globais (assume-se que seja um singleton)\nselected_gv AS (\n    SELECT *\n    FROM global_vars\n    LIMIT 1\n),\n/*\nRecupera as variáveis globais da tabela `global_vars`.\n- Como se assume que há apenas um conjunto de variáveis globais, retorna apenas uma linha (LIMIT 1).\n*/\n\n-- 3) Faz o upsert do usuário: insere se não existir, caso contrário, ignora\nupsert_user AS (\n    INSERT INTO users (id, date_created, picture_url)\n    VALUES ({{ $json.body.sender.id }}, NOW(), '{{ $json.body.sender.avatar }}')\n    ON CONFLICT (id) DO NOTHING\n    RETURNING *\n),\n/*\nInsere um novo usuário na tabela `users` caso ele ainda não exista.\n- Se o usuário já existir (`id` conflitante), a inserção é ignorada.\n- Retorna os dados do usuário recém-inserido.\n*/\n\n-- 4) Seleciona o usuário (recém-inserido ou existente)\nfinal_user AS (\n    SELECT * FROM upsert_user\n    UNION\n    SELECT * FROM users\n    WHERE id = {{ $json.body.sender.id }}\n),\n/*\nGarante que o usuário está disponível para os próximos passos.\n- Se o usuário foi inserido no passo anterior (`upsert_user`), ele é retornado.\n- Caso contrário, seleciona o usuário existente na tabela `users`.\n- Usa `UNION` para combinar as duas possibilidades.\n*/\n\n-- 5) Cria uma nova conversa apenas se não existir nenhuma para esse usuário\nmaybe_new_conversation AS (\n    INSERT INTO conversations (id, user_id, date_created)\n    SELECT gen_random_uuid(), final_user.id, NOW()\n    FROM final_user\n    WHERE NOT EXISTS (\n        SELECT 1\n        FROM conversations\n        WHERE user_id = final_user.id\n    )\n    RETURNING *\n),\n/*\nCria uma nova conversa apenas se o usuário ainda não tiver uma.\n- Gera um UUID para a nova conversa.\n- Define a `date_created` como o timestamp atual.\n- Usa `WHERE NOT EXISTS` para evitar criar conversas duplicadas para o mesmo usuário.\n- Retorna os dados da conversa recém-criada.\n*/\n\n-- 6) Seleciona a última conversa do usuário (nova ou existente)\nlast_conversation AS (\n    SELECT * FROM maybe_new_conversation\n    UNION\n    SELECT * FROM conversations\n    WHERE user_id = (SELECT id FROM final_user)\n    ORDER BY date_created DESC\n    LIMIT 1\n)\n/*\nSeleciona a última conversa do usuário, seja ela recém-criada ou já existente.\n- Combina os resultados de `maybe_new_conversation` (se foi criada) com as conversas já existentes.\n- Filtra as conversas pelo `user_id` correspondente.\n- Ordena por `date_created` em ordem decrescente para garantir que a mais recente seja selecionada.\n- Retorna apenas a conversa mais recente (LIMIT 1).\n*/\n\n-- 7) Retorna os resultados no formato JSON\nSELECT\n    (SELECT row_to_json(ai) FROM selected_ai ai) AS ai_agents,\n    (SELECT row_to_json(gv) FROM selected_gv gv) AS global_vars,\n    (SELECT row_to_json(final_user) FROM final_user) AS users,\n    (SELECT row_to_json(last_conversation) FROM last_conversation) AS conversations;\n/*\nConverte os resultados das CTEs em JSON.\n- `row_to_json` transforma cada linha retornada em um objeto JSON.\n- Cada resultado é nomeado conforme sua entidade correspondente (`ai_agents`, `global_vars`, `users`, `conversations`).\n*/",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -900,
        580
      ],
      "id": "5dc52430-9223-4274-8491-de1754c40d62",
      "name": "Get Vars",
      "credentials": {
        "postgres": {
          "id": "1Jj8ddykbvqPSFOp",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://stirling-pdf:8080/api/v1/convert/pdf/img",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-API-KEY",
              "value": "={{ $('Mapping').first().json.system.stirling_pdf_key }}"
            },
            {
              "name": "accept",
              "value": "*/*"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "imageFormat",
              "value": "jpg"
            },
            {
              "name": "singleOrMultiple",
              "value": "single"
            },
            {
              "name": "colorType",
              "value": "color"
            },
            {
              "name": "dpi",
              "value": "80"
            },
            {
              "parameterType": "formBinaryData",
              "name": "fileInput",
              "inputDataFieldName": "data"
            }
          ]
        },
        "options": {}
      },
      "id": "f1ebf6a5-de30-4492-8e13-943761e79db6",
      "name": "Convert PDF",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -300,
        1400
      ],
      "notesInFlow": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/audio/transcriptions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Mapping').first().json.system.openai_key }}"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "whisper-1"
            },
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "data"
            }
          ]
        },
        "options": {}
      },
      "id": "d3c25024-7b73-4ab9-8880-981c27068ba9",
      "name": "Transcription",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -300,
        1200
      ],
      "notesInFlow": true
    },
    {
      "parameters": {
        "content": "Fluxo de processamento principal",
        "height": 80,
        "width": 260,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1180,
        400
      ],
      "id": "a6d3c581-b365-4c04-bbba-74261115544a",
      "name": "Sticky Note13"
    },
    {
      "parameters": {
        "jsCode": "const axios = require('axios');\nconst FormData = require('form-data');\n\nconst mappingData = $('Mapping').first().json; // Obtém todo o conteúdo de 'Mapping'\nconst webhookUrl = `http://n8n_webhook:5678/webhook/${mappingData.system.workflow_path}`;\nconst formData = new FormData();\n\n// Unifica os valores de \"content\" com quebra de linha dupla\nconst unifiedContent = items\n    .map(item => item.json.content)\n    .filter(content => content) // Remove itens vazios ou undefined\n    .join('\\n\\n'); // Junta os conteúdos com duas quebras de linha\n\n// Monta o JSON separado para o corpo da requisição\nconst jsonData = {\n    content: unifiedContent,\n    mapping: mappingData\n};\n\n// Adiciona os dados JSON ao FormData\nformData.append('content', jsonData.content);\nformData.append('mapping', JSON.stringify(jsonData.mapping));\n\n// Adiciona arquivos binários mantendo os nomes originais\nitems.forEach((item) => {\n    if (item.binary) {\n        Object.keys(item.binary).forEach((key) => {\n            const file = item.binary[key];\n            formData.append(key, Buffer.from(file.data, 'base64'), {\n                filename: file.fileName || key,\n                contentType: file.mimeType,\n            });\n        });\n    }\n});\n\n// Envia a requisição para o webhook\nreturn axios.post(webhookUrl, formData, {\n    headers: formData.getHeaders(),\n}).then(response => [{ json: response.data }])\n  .catch(error => [{ json: { error: error.message } }]);"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -120,
        1100
      ],
      "id": "c554b7b7-9e86-4318-8c13-b220a7bb8b46",
      "name": "Execute Core"
    },
    {
      "parameters": {
        "content": "Fluxo Core, responsável pelo processamento da AI",
        "height": 80,
        "width": 260,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1200,
        1180
      ],
      "id": "ca510ab9-7adf-4bb7-ba22-1710dc1295f9",
      "name": "Sticky Note14"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Obtém o último item da tabela conversations com base no campo 'date_created'\nWITH last_conversation AS (\n    SELECT id \n    FROM conversations\n    WHERE user_id = {{ $('Mapping').first().json.chatwoot.contact_id }}\n    ORDER BY date_created DESC\n    LIMIT 1\n),\n\n-- Obtém os últimos dois registros da tabela core_chat_histories com base no session_id\nlast_two_chat_histories AS (\n    SELECT id \n    FROM core_chat_histories\n    WHERE session_id = (SELECT id FROM last_conversation)\n    ORDER BY id DESC\n    LIMIT 2\n)\n\n-- Deleta os últimos dois registros encontrados\nDELETE FROM core_chat_histories\nWHERE id IN (SELECT id FROM last_two_chat_histories);",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        500,
        1100
      ],
      "id": "b39ad79d-99b1-48ce-8fde-ee081dd48322",
      "name": "Clear History",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "1Jj8ddykbvqPSFOp",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH last_conversation AS (\n  -- Encontra a última conversa do usuário\n  SELECT id\n  FROM conversations\n  WHERE user_id = {{ $('Mapping').first().json.chatwoot.contact_id }}\n  ORDER BY date_created DESC\n  LIMIT 1\n),\nlast_two_chat_histories AS (\n  -- Obtém os dois últimos históricos da conversa e define uma ordem para identificar o penúltimo\n  SELECT \n    id,\n    ROW_NUMBER() OVER (ORDER BY id DESC) AS rn\n  FROM core_chat_histories\n  WHERE session_id = (SELECT id FROM last_conversation)\n  ORDER BY id DESC\n  LIMIT 2\n)\nUPDATE core_chat_histories c\nSET \n  date_created = NOW(),\n  message = CASE \n              -- Se for o penúltimo (rn = 2) atualiza o JSON com o user_name\n              WHEN l.rn = 2 THEN jsonb_set(c.message::jsonb, '{user_name}', to_jsonb('{{ $('Mapping').first().json.chatwoot.user_name }}'::text), true)\n              ELSE c.message\n            END\nFROM last_two_chat_histories l\nWHERE c.id = l.id;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        900,
        1300
      ],
      "id": "26d99333-8bcc-482d-b8c4-4e641412db17",
      "name": "Add Redistors",
      "credentials": {
        "postgres": {
          "id": "1Jj8ddykbvqPSFOp",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "name": "restart_history",
        "description": "=Invoque essa tool para iniciar uma nova conversa para o user, assim ignorando o histórico passado. Apenas quando o user solicitar.",
        "jsCode": "const axios = require('axios');\n\n// Converte o mapeamento recebido em JSON\nconst mapping = JSON.parse($('Core Input').item.json.body.mapping);\n\n// Verifica se o usuário é admin; caso contrário, retorna erro\nif (mapping.system.user_type !== 'admin') {\n  return JSON.stringify({ success: false, error: \"Acesso negado: usuário não autorizado.\" });\n}\n\n/**\n * Função que espera pelo tempo especificado.\n * @param {number} ms - Milissegundos a aguardar.\n * @returns {Promise<void>}\n */\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n/**\n * Função para enviar a requisição para criar uma conversa no Directus.\n * Tenta até 3 vezes em caso de falha, com delay de 1 segundo entre as tentativas.\n * @returns {Promise<object>} - Objeto com sucesso ou erro.\n */\nasync function sendRequest() {\n  const url = 'http://directus:8055/items/conversations';\n  const data = {\n    user_id: mapping.chatwoot.contact_id,\n    date_created: new Date().toISOString()\n  };\n  const headers = {\n    Authorization: `Bearer ${mapping.system.directus_token}`,\n    'Content-Type': 'application/json'\n  };\n\n  let attempt = 0;\n  let lastError = null;\n\n  while (attempt < 3) {\n    try {\n      const response = await axios.post(url, data, { headers });\n      console.log(`Requisição realizada com sucesso na tentativa ${attempt + 1}.`);\n      return { success: true, data: response.data };\n    } catch (error) {\n      attempt++;\n      lastError = error;\n      console.error(`Tentativa ${attempt} falhou:`, error.response ? error.response.data : error.message);\n      if (attempt < 3) {\n        console.log(\"Aguardando 1 segundo antes da nova tentativa...\");\n        await delay(1000);\n      }\n    }\n  }\n  \n  return { success: false, error: lastError.response ? lastError.response.data : lastError.message };\n}\n\nreturn sendRequest().then(result => JSON.stringify(result));"
      },
      "type": "@n8n/n8n-nodes-langchain.toolCode",
      "typeVersion": 1.1,
      "position": [
        1440,
        1580
      ],
      "id": "2c8d4091-4798-44a3-89e5-d44ee314d784",
      "name": "Restart History"
    },
    {
      "parameters": {
        "mode": "expression",
        "numberOutputs": 3,
        "output": "={{\n  $json.content.data_url?.match(/\\.(oga|png|jpg|jpeg|txt|pdf)$/i) !== null \n  && !!$json.content.data_url \n    ? 0 \n    : !!$json.content.content \n      ? 1 \n      : 2\n}}"
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -900,
        1500
      ],
      "id": "d7a5fbdf-6e60-4d93-8d49-6c16ce8f5965",
      "name": "Switch 2"
    },
    {
      "parameters": {
        "mode": "expression",
        "numberOutputs": 3,
        "output": "={{ \n  $('Add to List').item.json.chatwoot.message_id !==\n  JSON.parse($('Get List').item.json.data.first()).message_id\n    ? 0\n    : $now.minus($('Mapping').first().json.system.cooldown, 'seconds').diffTo(\n        JSON.parse($('Get List').item.json.data.last()).timestamp,\n        'seconds'\n      ) >= 0\n      ? 1\n      : 2\n}}\n\n\n\n"
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        100,
        580
      ],
      "id": "be373b6a-08f3-45d3-b4b5-4bcaacf1f5fe",
      "name": "Switch 1"
    },
    {
      "parameters": {
        "mode": "expression",
        "numberOutputs": 2,
        "output": "={{\n  (\n    $json.chatwoot.channel !== 'WhatsApp Web Group' ||\n    (\n      $json.system.allow_whatsapp_groups === 'always_enabled' ||\n      (\n        $json.system.allow_whatsapp_groups === 'enabled_when_mentioned' &&\n        $json.system.agent_mentioned\n      )\n    )\n  )\n  &&\n  {\n    'pending_status': \n      $json.chatwoot.sender_type === 'Contact' &&\n      $json.chatwoot.conversation_status === 'pending',\n\n    'all_status': \n      $json.chatwoot.sender_type === 'Contact',\n\n    'not_assigned': \n      $json.chatwoot.sender_type === 'Contact' &&\n      !$json.chatwoot.assignee\n  }[$json.system.enabled_condition]\n    ? 1\n    : 0\n}}"
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -500,
        580
      ],
      "id": "fa7fce13-38d7-435a-bc81-1e7aa9471bf9",
      "name": "Switch 0"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7cade77f-2498-4515-991a-cbe2d5ffe67a",
              "name": "content",
              "value": "={{\n  $json.content?.content \n  || $json.text \n  || (\n    $('Switch 2').item.json.content.data_url.endsWith('.txt') \n      ? $json.data + '\\n\\n' + $('Switch 2').item.json.content?.content \n      : null\n  )\n}}",
              "type": "string"
            },
            {
              "id": "e8da4202-58a2-4990-9e36-9a56f18c7263",
              "name": "loop_reset",
              "value": false,
              "type": "boolean"
            }
          ]
        },
        "includeOtherFields": true,
        "include": "selected",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        80,
        1500
      ],
      "id": "8e0bfa01-3df5-4f79-a805-9cada188d368",
      "name": "Keep Loop"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"chatwoot\": {\n    \"account_id\": {{ $('Consumer').first().json.body.account.id }},\n    \"contact_id\": {{ $('Consumer').first().json.body.conversation.contact_inbox.contact_id }},\n\n    \"conversation_id\": {{ $('Consumer').first().json.body.conversation.messages[0].conversation_id }},\n    \"sender_type\": {{ JSON.stringify($('Consumer').item.json.body.conversation.messages[0].sender_type) }},\n    \"bot_token\": {{ JSON.stringify($('Get Vars').first().json.ai_agents.bot_token) }},\n    \"conversation_status\": {{ JSON.stringify($('Consumer').item.json.body.conversation.status) }},\n    \"assignee\": {{ JSON.stringify($('Consumer').item.json.body.conversation?.meta?.assignee?.name || null ) }},\n    \n    \"content\": {{ JSON.stringify(\n      ($('Consumer').first().json.body?.content || '')\n        .replace(\n          /^\\*\\*(.*?)\\*\\*\\n\\n/,\n          $('Consumer').item.json.body.sender.identifier?.match(/@g\\.us$/) ? '' : '$&'\n        )\n        .replace(\n          new RegExp('@' + ($json.ai_agents.phone_number || '').replace(/\\D/g, ''), 'g'),\n          '@YOU'\n        )\n        .trim()\n    ) }},\n    \n    \"data_url\": {{ JSON.stringify(\n        $('Consumer').first().json.body.conversation.messages?.[0]?.attachments?.[0]?.data_url || null\n      )\n    }},\n    \n    \"message_id\": {{ $('Consumer').first().json.body.id }},\n    \n    \"channel\": {{\n      JSON.stringify(\n        $('Consumer').item.json.body.conversation.channel === 'Channel::Api' \n        ? (\n            /@s\\.whatsapp\\.net$/.test($('Consumer').item.json.body.sender.identifier) \n            ? 'WhatsApp Web' \n            : /@g\\.us$/.test($('Consumer').item.json.body.sender.identifier) \n            ? 'WhatsApp Web Group' \n            : $('Consumer').item.json.body.conversation.channel.replace('Channel::', '')\n          ) \n        : $('Consumer').item.json.body.conversation.channel.replace('Channel::', '')\n      )\n    }},\n    \n    \"user_name\": {{ JSON.stringify(\n      $('Consumer').item.json.body.sender.identifier?.match(/@g\\.us$/)\n        ? (\n            $('Consumer').first().json.body?.content?.match(/^\\*\\*(.*?)\\*\\*/)?.[1] || ''\n          )\n        : $('Consumer').first().json.body.sender?.name || ''\n    ) }},\n\n    \"phone_number\": {{ JSON.stringify($('Consumer').item.json.body.sender.phone_number) || null }}\n  },\n  \n  \"system\": {\n    \"cooldown\": {{ $('Get Vars').first().json.ai_agents.cooldown }},\n    \"workflow_path\": {{ JSON.stringify($('Get Vars').first().json.ai_agents.workflow_path) }},\n    \"models\": {{ JSON.stringify($('Get Vars').first().json.ai_agents.models) }},\n    \"openai_key\": {{ JSON.stringify($('Get Vars').first().json.global_vars.openai_key) }},\n    \"directus_token\": {{ JSON.stringify($json.global_vars.directus_token) }},\n    \"stirling_pdf_key\": {{ JSON.stringify($('Get Vars').first().json.global_vars.stirling_pdf_key) }},\n    \"conversations_id\": {{ JSON.stringify($('Get Vars').first().json.conversations.id) }},\n    \"context_window\": {{ JSON.stringify($('Get Vars').first().json.ai_agents.context_window) }},\n    \"enabled_condition\": {{ JSON.stringify($('Get Vars').first().json.ai_agents.enabled_condition) }},\n    \"allow_whatsapp_groups\": {{ JSON.stringify($('Get Vars').first().json.ai_agents.allow_whatsapp_groups) }},\n    \"allow_human_interruption\": {{ JSON.stringify($('Get Vars').first().json.ai_agents.allow_human_interruption) }},\n    \"agent_phone_number\": {{ JSON.stringify($json.ai_agents.phone_number.replace(/\\D/g, '')) }},\n    \"agent_mentioned\": {{ $('Consumer').first().json.body?.content.includes('@' + $json.ai_agents.phone_number.replace(/\\D/g, '')) }},\n    \"agent_name\": {{ JSON.stringify($('Get Vars').first().json.ai_agents.name) }},\n    \"user_type\": {{ JSON.stringify($json.users.type) }}\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -700,
        580
      ],
      "id": "92ea8daa-2fe6-4c23-b698-336f170454bf",
      "name": "Mapping"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -900,
        1100
      ],
      "id": "a46b3bc3-4f8a-4297-9423-11cf25d09704",
      "name": "No Operation 1"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        600,
        1500
      ],
      "id": "22a81675-2b0f-49d6-b11b-dd71511e8a06",
      "name": "No Operation "
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "core_chat_histories",
          "mode": "list",
          "cachedResultName": "core_chat_histories"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "date_created": "={{ $now }}",
            "session_id": "={{ $json.system.conversations_id }}",
            "message": "={{ JSON.parse(JSON.stringify({\n  \"type\": \"human\",\n  \"content\": $json.chatwoot.content,\n  \"user_name\": $json.chatwoot.user_name\n})) }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "message",
              "displayName": "message",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true
            },
            {
              "id": "session_id",
              "displayName": "session_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "date_created",
              "displayName": "date_created",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -300,
        480
      ],
      "id": "995200dd-f24d-4c62-86cf-459a81b1805b",
      "name": "Update History",
      "credentials": {
        "postgres": {
          "id": "1Jj8ddykbvqPSFOp",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const axios = require('axios');\n\nconst { system, chatwoot } = $('Mapping').first().json;\n\nif (\n  system.allow_human_interruption &&\n  system.enabled_condition === 'pending_status' &&\n  chatwoot.sender_type === 'User' &&\n  chatwoot.conversation_status !== 'open'\n) {\n  return axios.post(\n    `http://chatwoot:3000/api/v1/accounts/${chatwoot.account_id}/conversations/${chatwoot.conversation_id}/toggle_status`,\n    { status: \"open\" },\n    { headers: { api_access_token: chatwoot.bot_token } }\n  )\n  .then(res => [{ json: res.data }])\n  .catch(err => [{ json: { error: err.response?.data || err.message } }]);\n}\n\nreturn [{ json: { message: \"Nenhuma ação realizada\" } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -100,
        480
      ],
      "id": "75d385e0-847d-406c-b433-32be456f9bbd",
      "name": "Open Conversation"
    },
    {
      "parameters": {
        "url": "https://api.elevenlabs.io/v1/models",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "xi-api-key",
              "value": "sk_2f1230c0cae8aa43d5c5a126dc8765d5f7fd3b5780f2870f"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1280,
        2100
      ],
      "id": "36d542a1-f558-418b-9105-d14cefadb471",
      "name": "HTTP Request",
      "executeOnce": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.elevenlabs.io/v1/text-to-speech/OYTbf65OHHFELVut7v2H",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "output_format",
              "value": "mp3_44100_128"
            },
            {
              "name": "optimize_streaming_latency",
              "value": [
                "0?output_format=mp3_44100_128",
                "'0'"
              ]
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "xi-api-key",
              "value": "sk_2f1230c0cae8aa43d5c5a126dc8765d5f7fd3b5780f2870f"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "text",
              "value": "Você está falando com um assistente virtual. Como posso ajudá-lo hoje?"
            },
            {
              "name": "model_id",
              "value": "={{ $('HTTP Request').all()[0].json.model_id }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1540,
        2100
      ],
      "id": "157af641-95aa-4c37-806f-1044ee89d589",
      "name": "HTTP Request1",
      "executeOnce": true
    },
    {
      "parameters": {
        "url": "https://api.elevenlabs.io/v1/voices",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "show_legacy",
              "value": [
                "true",
                "'true'"
              ]
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "xi-api-key",
              "value": "sk_2f1230c0cae8aa43d5c5a126dc8765d5f7fd3b5780f2870f"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1000,
        2100
      ],
      "id": "e23f709f-ad15-48fa-aadd-e6128fbfe2c6",
      "name": "HTTP Request2"
    },
    {
      "parameters": {
        "url": "https://api.elevenlabs.io/v1/user",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "xi-api-key",
              "value": "sk_2f1230c0cae8aa43d5c5a126dc8765d5f7fd3b5780f2870f"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1000,
        2340
      ],
      "id": "c34ff832-55a2-4f10-afaf-409c1b0747cb",
      "name": "HTTP Request3"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.elevenlabs.io/v1/voices/add/{{ $json.user_id }}/iScHbNW8K33gNo3lGgbo",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "xi-api-key",
              "value": "sk_2f1230c0cae8aa43d5c5a126dc8765d5f7fd3b5780f2870f"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "new_name",
              "value": "Marianne"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1280,
        2340
      ],
      "id": "becdc095-026a-4cc1-9dbc-c1eb84db2b5b",
      "name": "HTTP Request4"
    },
    {
      "parameters": {
        "url": "https://api.elevenlabs.io/v1/user",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "xi-api-key",
              "value": "sk_2f1230c0cae8aa43d5c5a126dc8765d5f7fd3b5780f2870f"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        720,
        2340
      ],
      "id": "a26f645e-83e4-419f-a408-cf10b13996c1",
      "name": "HTTP Request5"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=http://chatwoot:3000/api/v1/accounts/{{ $('Mapping').first().json.chatwoot.account_id }}/conversations/{{ $('Mapping').first().json.chatwoot.conversation_id }}/messages",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "api_access_token",
              "value": "={{ $('Mapping').first().json.chatwoot.bot_token }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "content",
              "value": "={{ $('Execute Core').item.json.output }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1200,
        960
      ],
      "id": "319735a6-941e-4a78-bcfc-0ee211013523",
      "name": "Chatwoot Output 2"
    },
    {
      "parameters": {
        "jsCode": "/**\n * Código para segmentar uma mensagem \"humanizada\" e enviá-la para o Chatwoot.\n * \n * Regras de Segmentação:\n * 1. Se o texto tiver menos que MIN_TOTAL_LENGTH caracteres, ele é enviado inteiro.\n * 2. Se for longo:\n *    a. Tenta dividir por quebras de linha duplas (\"\\n\\n\"). Se obtiver pelo menos dois segmentos, utiliza essa divisão.\n *    b. Caso contrário, segmenta com base em delimitadores naturais (ponto, ponto de exclamação, ponto de interrogação, vírgula, ponto e vírgula, dois-pontos) seguidos de espaço.\n *       - A divisão ocorre com lookbehind para garantir que a pontuação seja considerada, sem quebrar no meio de uma palavra.\n * 3. Se algum segmento resultante for menor que MIN_SEGMENT_LENGTH, ele é concatenado com o próximo.\n * 4. Cada segmento é enviado com um delay proporcional (DELAY_FACTOR ms para cada 100 caracteres).\n * \n * Parâmetros:\n * - account_id, conversation_id, bot_token: obtidos de $('Mapping').first().json.chatwoot\n * - content: obtido de $('Execute Core').item.json.output\n * \n * Endpoint do Chatwoot:\n *   http://chatwoot:3000/api/v1/accounts/{account_id}/conversations/{conversation_id}/messages\n * \n * O token é enviado no header \"api_access_token\".\n */\n\nconst axios = require('axios');\n\n// Parâmetros de segmentação\nconst MIN_TOTAL_LENGTH = 50;         // Se o texto tiver menos que 50 caracteres, não segmenta.\nconst DESIRED_SEGMENT_SIZE = 200;      // Tamanho aproximado desejado para cada segmento.\nconst MIN_SEGMENT_LENGTH = 30;         // Segmentos menores que 30 caracteres serão concatenados.\nconst DELAY_FACTOR = 50;               // Delay de 50ms para cada 100 caracteres.\n\n// Função de delay\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n/**\n * Função para segmentar o texto sem quebrar palavras.\n * Utiliza duas estratégias:\n *   1. Se houver \"\\n\\n\", divide por essa sequência.\n *   2. Se não houver ou se não gerar segmentos suficientes, divide por delimitadores naturais\n *      (ponto, ponto de interrogação, ponto de exclamação, vírgula, ponto e vírgula, dois-pontos) seguidos de espaço.\n *\n * @param {string} text - Texto a segmentar.\n * @returns {Array<string>} - Array de segmentos.\n */\nfunction segmentContent(text) {\n  // Se o texto for curto, retorna-o inteiro.\n  if (text.length < MIN_TOTAL_LENGTH) {\n    return [text];\n  }\n  \n  let segments = [];\n  \n  // Estratégia 1: Dividir por quebra de linha dupla\n  if (text.includes(\"\\n\\n\")) {\n    segments = text.split(/\\n\\n/).map(seg => seg.trim()).filter(seg => seg);\n  }\n  \n  // Se não houver segmentos suficientes ou se algum segmento for muito longo, use estratégia 2\n  if (segments.length === 0 || segments.some(seg => seg.length > DESIRED_SEGMENT_SIZE * 1.5)) {\n    // Regex para dividir com base em delimitadores permitidos, sem quebrar palavras:\n    // Procura por delimitadores (ponto, ?, !, vírgula, ;, :) seguidos de espaço.\n    const regex = /(?<=[.?!,;:])\\s+/g;\n    segments = text.split(regex).map(seg => seg.trim()).filter(seg => seg);\n  }\n  \n  // Se algum segmento for muito curto, concatenar com o próximo\n  let finalSegments = [];\n  let buffer = \"\";\n  for (let seg of segments) {\n    if ((buffer + \" \" + seg).trim().length < MIN_SEGMENT_LENGTH) {\n      buffer = (buffer + \" \" + seg).trim();\n    } else {\n      if (buffer) {\n        finalSegments.push(buffer);\n        buffer = \"\";\n      }\n      finalSegments.push(seg);\n    }\n  }\n  if (buffer) finalSegments.push(buffer);\n  \n  // Se algum segmento for muito longo, opcionalmente, divida de forma simples (evitando quebrar palavras)\n  finalSegments = finalSegments.flatMap(seg => {\n    if (seg.length > DESIRED_SEGMENT_SIZE * 1.5) {\n      // Divide por espaços: garante que não quebra no meio de palavras.\n      const words = seg.split(\" \");\n      const subSegments = [];\n      let currentSegment = \"\";\n      for (const word of words) {\n        if ((currentSegment + \" \" + word).trim().length > DESIRED_SEGMENT_SIZE) {\n          subSegments.push(currentSegment.trim());\n          currentSegment = word;\n        } else {\n          currentSegment += \" \" + word;\n        }\n      }\n      if (currentSegment.trim()) subSegments.push(currentSegment.trim());\n      return subSegments;\n    } else {\n      return [seg];\n    }\n  });\n  \n  return finalSegments;\n}\n\n/**\n * Função para enviar uma mensagem para o Chatwoot.\n * \n * @param {string} content - Conteúdo da mensagem.\n * @returns {Promise<object>} - Resposta da requisição.\n */\nasync function sendMessage(content) {\n  const accountId = $('Mapping').first().json.chatwoot.account_id;\n  const conversationId = $('Mapping').first().json.chatwoot.conversation_id;\n  const botToken = $('Mapping').first().json.chatwoot.bot_token;\n  \n  const url = `http://chatwoot:3000/api/v1/accounts/${encodeURIComponent(accountId)}/conversations/${encodeURIComponent(conversationId)}/messages`;\n  const payload = { content };\n  const headers = {\n    \"api_access_token\": botToken,\n    \"Content-Type\": \"application/json\"\n  };\n  \n  try {\n    console.log(`Enviando segmento: \"${content.substring(0, 50)}...\"`);\n    const response = await axios.post(url, payload, { headers });\n    console.log(\"Segmento enviado com sucesso.\");\n    return response.data;\n  } catch (error) {\n    console.error(\"Erro ao enviar segmento:\", error.toString(), error.response ? error.response.data : \"\");\n    throw error;\n  }\n}\n\n/**\n * Função principal: segmenta o texto e envia cada segmento com delay proporcional.\n */\nasync function main() {\n  const text = $('Execute Core').item.json.output;\n  console.log(`Texto original possui ${text.length} caracteres.`);\n  \n  const segments = segmentContent(text);\n  console.log(`Texto segmentado em ${segments.length} parte(s).`);\n  \n  // Enviar cada segmento com delay proporcional\n  for (const segment of segments) {\n    try {\n      await sendMessage(segment);\n    } catch (error) {\n      console.error(\"Erro ao enviar segmento:\", error.toString());\n    }\n    // Calcula delay proporcional: 50ms para cada 100 caracteres do segmento\n    const delayTime = Math.ceil(segment.length / 100) * 50;\n    console.log(`Aguardando ${delayTime}ms antes do próximo segmento.`);\n    await delay(delayTime);\n  }\n  \n  return { message: \"Todos os segmentos foram enviados com sucesso.\" };\n}\n\nreturn main().then(result => [{ json: result }]);\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        700,
        1300
      ],
      "id": "3aa4b08c-0994-4cb9-9118-8b32ff38d404",
      "name": "Chatwoot Output"
    }
  ],
  "connections": {
    "Memory": {
      "ai_memory": [
        [
          {
            "node": "Main Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Main Agent": {
      "main": [
        [
          {
            "node": "No Operation 2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add to List": {
      "main": [
        [
          {
            "node": "Get List",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get List": {
      "main": [
        [
          {
            "node": "Switch 1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse JSON": {
      "main": [
        [
          {
            "node": "Split Itens",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop": {
      "main": [
        [
          {
            "node": "No Operation 1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Switch 2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Itens": {
      "main": [
        [
          {
            "node": "Loop",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Media": {
      "main": [
        [
          {
            "node": "Switch 02",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch 02": {
      "main": [
        [
          {
            "node": "Transcription",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation 0",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Convert PDF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No Operation 0": {
      "main": [
        [
          {
            "node": "Keep Loop",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reset List": {
      "main": [
        [
          {
            "node": "Chatwoot Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Final List 2": {
      "main": [
        [
          {
            "node": "Switch 3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Final List 1": {
      "main": [
        [
          {
            "node": "Parse JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cooldown": {
      "main": [
        [
          {
            "node": "Get List",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No Operation 2": {
      "main": [
        []
      ]
    },
    "Consumer": {
      "main": [
        [
          {
            "node": "Get Vars",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch 3": {
      "main": [
        [
          {
            "node": "Clear History",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Reset List",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Core Input": {
      "main": [
        [
          {
            "node": "Main Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter": {
      "ai_languageModel": [
        [
          {
            "node": "Main Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Get Vars": {
      "main": [
        [
          {
            "node": "Mapping",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert PDF": {
      "main": [
        [
          {
            "node": "No Operation 0",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transcription": {
      "main": [
        [
          {
            "node": "No Operation 0",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Core": {
      "main": [
        [
          {
            "node": "Get Final List 2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Clear History": {
      "main": [
        [
          {
            "node": "Parse JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Restart History": {
      "ai_tool": [
        [
          {
            "node": "Main Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Switch 2": {
      "main": [
        [
          {
            "node": "Download Media",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Keep Loop",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Switch 1": {
      "main": [
        [
          {
            "node": "No Operation",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Final List 1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Cooldown",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch 0": {
      "main": [
        [
          {
            "node": "Update History",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Add to List",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add Redistors": {
      "main": [
        []
      ]
    },
    "Keep Loop": {
      "main": [
        [
          {
            "node": "Loop",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mapping": {
      "main": [
        [
          {
            "node": "Switch 0",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No Operation 1": {
      "main": [
        [
          {
            "node": "Execute Core",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update History": {
      "main": [
        [
          {
            "node": "Open Conversation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request2": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request3": {
      "main": [
        [
          {
            "node": "HTTP Request4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request5": {
      "main": [
        [
          {
            "node": "HTTP Request3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chatwoot Output 2": {
      "main": [
        []
      ]
    },
    "Chatwoot Output": {
      "main": [
        [
          {
            "node": "Add Redistors",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "4NoK6P9qxRkJzCvU"
  },
  "staticData": {
    "node:Schedule Trigger": {
      "recurrenceRules": []
    }
  },
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {
    "Core Input": [
      {
        "json": {
          "headers": {
            "accept": "application/json, text/plain, */*",
            "content-type": "multipart/form-data; boundary=--------------------------698709374988848630684344",
            "user-agent": "axios/1.7.4",
            "content-length": "1067",
            "accept-encoding": "gzip, compress, deflate, br",
            "host": "n8n_webhook:5678",
            "connection": "keep-alive"
          },
          "params": {},
          "query": {},
          "body": {
            "content": "test",
            "mapping": "{\"chatwoot\":{\"account_id\":7,\"contact_id\":37,\"conversation_id\":39,\"sender_type\":\"Contact\",\"bot_token\":\"P88UsrzFw29m2jhkXGQYPt9T\",\"conversation_status\":\"pending\",\"assignee\":null,\"content\":\"test\",\"data_url\":null,\"message_id\":634,\"channel\":\"Telegram\",\"user_name\":\"Pedro Nascimento\",\"phone_number\":null},\"system\":{\"cooldown\":0,\"workflow_path\":\"main\",\"models\":\"openai/o3-mini\",\"openai_key\":null,\"directus_token\":\"9tKWkbqT5FhxH7DIsjBZLpcMNbBZ7I6b\",\"stirling_pdf_key\":\"48ccc60f-c073-4a96-bee0-a6fe32339d74\",\"conversations_id\":\"7afa8cb6-7544-47e6-b7ac-a38d67c69fe9\",\"context_window\":30,\"enabled_condition\":\"pending_status\",\"allow_whatsapp_groups\":\"enabled_when_mentioned\",\"allow_human_interruption\":true,\"agent_phone_number\":\"558585035162\",\"agent_mentioned\":false,\"agent_name\":\"Anna\",\"user_type\":\"user\"}}"
          },
          "webhookUrl": "https://whk.dev.bitliv.ai/webhook/main",
          "executionMode": "production"
        }
      }
    ],
    "Consumer": [
      {
        "json": {
          "headers": {
            "accept": "application/json",
            "user-agent": "rest-client/2.1.0 (linux-musl x86_64) ruby/3.3.3p89",
            "content-type": "application/json",
            "content-length": "4108",
            "accept-encoding": "gzip;q=1.0,deflate;q=0.6,identity;q=0.3",
            "host": "n8n_webhook:5678"
          },
          "params": {},
          "query": {},
          "body": {
            "account": {
              "id": 7,
              "name": "Bitliv"
            },
            "additional_attributes": {},
            "content_attributes": {},
            "content_type": "text",
            "content": "Opa",
            "conversation": {
              "additional_attributes": {
                "chat_id": 753066854
              },
              "can_reply": true,
              "channel": "Channel::Telegram",
              "contact_inbox": {
                "id": 68,
                "contact_id": 37,
                "inbox_id": 4,
                "source_id": "753066854",
                "created_at": "2025-02-01T11:37:10.399Z",
                "updated_at": "2025-02-01T11:37:10.399Z",
                "hmac_verified": false,
                "pubsub_token": "uQ8T4BqnGNfcbAUneAv5sh6W"
              },
              "id": 39,
              "inbox_id": 4,
              "messages": [
                {
                  "id": 644,
                  "content": "Opa",
                  "account_id": 7,
                  "inbox_id": 4,
                  "conversation_id": 39,
                  "message_type": 0,
                  "created_at": 1738750276,
                  "updated_at": "2025-02-05T10:11:16.791Z",
                  "private": false,
                  "status": "sent",
                  "source_id": "96",
                  "content_type": "text",
                  "content_attributes": {},
                  "sender_type": "Contact",
                  "sender_id": 37,
                  "external_source_ids": {},
                  "additional_attributes": {},
                  "processed_message_content": "Opa",
                  "sentiment": {},
                  "conversation": {
                    "assignee_id": null,
                    "unread_count": 1,
                    "last_activity_at": 1738750276,
                    "contact_inbox": {
                      "source_id": "753066854"
                    }
                  },
                  "sender": {
                    "additional_attributes": {
                      "username": "pedrohnas",
                      "language_code": "pt-br",
                      "social_telegram_user_id": 753066854,
                      "social_telegram_user_name": "pedrohnas"
                    },
                    "custom_attributes": {},
                    "email": null,
                    "id": 37,
                    "identifier": null,
                    "name": "Pedro Nascimento",
                    "phone_number": null,
                    "thumbnail": "https://chat.dev.bitliv.ai/rails/active_storage/representations/redirect/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBBWkE9IiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--5806a04c8290f5afe5a9de27324113e01cab1a1b/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaDdCem9MWm05eWJXRjBTU0lJYW5CbkJqb0dSVlE2RTNKbGMybDZaVjkwYjE5bWFXeHNXd2RwQWZvdyIsImV4cCI6bnVsbCwicHVyIjoidmFyaWF0aW9uIn19--6484a55b320d84cf2c55376cc120444713caa4ca/file_0.jpg",
                    "type": "contact"
                  }
                }
              ],
              "labels": [],
              "meta": {
                "sender": {
                  "additional_attributes": {
                    "username": "pedrohnas",
                    "language_code": "pt-br",
                    "social_telegram_user_id": 753066854,
                    "social_telegram_user_name": "pedrohnas"
                  },
                  "custom_attributes": {},
                  "email": null,
                  "id": 37,
                  "identifier": null,
                  "name": "Pedro Nascimento",
                  "phone_number": null,
                  "thumbnail": "https://chat.dev.bitliv.ai/rails/active_storage/representations/redirect/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBBWkE9IiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--5806a04c8290f5afe5a9de27324113e01cab1a1b/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaDdCem9MWm05eWJXRjBTU0lJYW5CbkJqb0dSVlE2RTNKbGMybDZaVjkwYjE5bWFXeHNXd2RwQWZvdyIsImV4cCI6bnVsbCwicHVyIjoidmFyaWF0aW9uIn19--6484a55b320d84cf2c55376cc120444713caa4ca/file_0.jpg",
                  "type": "contact"
                },
                "assignee": null,
                "team": null,
                "hmac_verified": false
              },
              "status": "pending",
              "custom_attributes": {},
              "snoozed_until": null,
              "unread_count": 1,
              "first_reply_created_at": "2025-02-01T11:40:25.833Z",
              "priority": null,
              "waiting_since": 1738410032,
              "agent_last_seen_at": 1738706631,
              "contact_last_seen_at": 0,
              "last_activity_at": 1738750276,
              "timestamp": 1738750276,
              "created_at": 1738409831
            },
            "created_at": "2025-02-05T10:11:16.791Z",
            "id": 644,
            "inbox": {
              "id": 4,
              "name": "Telegram"
            },
            "message_type": "incoming",
            "status": "sent",
            "private": false,
            "sender": {
              "account": {
                "id": 7,
                "name": "Bitliv"
              },
              "additional_attributes": {
                "username": "pedrohnas",
                "language_code": "pt-br",
                "social_telegram_user_id": 753066854,
                "social_telegram_user_name": "pedrohnas"
              },
              "avatar": "https://chat.dev.bitliv.ai/rails/active_storage/representations/redirect/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBBWkE9IiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--5806a04c8290f5afe5a9de27324113e01cab1a1b/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaDdCem9MWm05eWJXRjBTU0lJYW5CbkJqb0dSVlE2RTNKbGMybDZaVjkwYjE5bWFXeHNXd2RwQWZvdyIsImV4cCI6bnVsbCwicHVyIjoidmFyaWF0aW9uIn19--6484a55b320d84cf2c55376cc120444713caa4ca/file_0.jpg",
              "custom_attributes": {},
              "email": null,
              "id": 37,
              "identifier": null,
              "name": "Pedro Nascimento",
              "phone_number": null,
              "thumbnail": "https://chat.dev.bitliv.ai/rails/active_storage/representations/redirect/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBBWkE9IiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--5806a04c8290f5afe5a9de27324113e01cab1a1b/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaDdCem9MWm05eWJXRjBTU0lJYW5CbkJqb0dSVlE2RTNKbGMybDZaVjkwYjE5bWFXeHNXd2RwQWZvdyIsImV4cCI6bnVsbCwicHVyIjoidmFyaWF0aW9uIn19--6484a55b320d84cf2c55376cc120444713caa4ca/file_0.jpg"
            },
            "source_id": "96",
            "event": "message_created"
          },
          "webhookUrl": "https://whk.dev.bitliv.ai/webhook/chatwoot",
          "executionMode": "production"
        }
      }
    ]
  },
  "versionId": "9205cb98-6881-45ff-8d16-77992af65cab",
  "triggerCount": 2,
  "tags": [
    {
      "createdAt": "2025-01-30T17:03:36.094Z",
      "updatedAt": "2025-01-30T17:03:36.094Z",
      "id": "0Zi4XIcBRQAtlr7Z",
      "name": "Anna's project"
    },
    {
      "createdAt": "2025-01-30T17:03:24.799Z",
      "updatedAt": "2025-01-30T17:03:24.799Z",
      "id": "yX83KwSzm9VQnrU1",
      "name": "development"
    }
  ]
}